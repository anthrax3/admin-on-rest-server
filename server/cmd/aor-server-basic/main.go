// Code generated by go-swagger; DO NOT EDIT.

package main

import (
	"log"
	"os"

	loads "github.com/go-openapi/loads"
	flags "github.com/jessevdk/go-flags"

	// "github.com/ant0ine/go-json-rest/rest"
	// eram "github.com/roscopecoltran/admin-on-rest-server/server/manager"
	// "net/http"

	"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"
	_ "github.com/jinzhu/gorm/dialects/postgres"
	_ "github.com/jinzhu/gorm/dialects/sqlite"

	"github.com/roscopecoltran/admin-on-rest-server/server/restapi"
	"github.com/roscopecoltran/admin-on-rest-server/server/restapi/operations"
)

var (
	db *gorm.DB
)

/*
	Refs:
	- https://github.com/jianqiu/vps/blob/master/cmd/soft-layer-vm-pool-server/main.go
*/
func main() {

	swaggerSpec, err := loads.Analyzed(restapi.SwaggerJSON, "")
	if err != nil {
		log.Fatalln(err)
	}

	db, err = gorm.Open("sqlite3", "./aor.db")
	if err != nil {
		panic(err)
	}
	db.LogMode(true)
	// db, err := sql.Open("sqlite3", "./aor.db")
	// defer db.Close()

	// initialize Entity REST API
	// entityManager := eram.NewEntityDbManager(db)
	// entityRestApi := restapi.NewEntityRestAPI(entityManager)
	// rest.Post("/api/:entity", entityRestApi.PostEntity)

	api := operations.NewEasyAdminAPI(swaggerSpec)
	server := restapi.NewServer(api)
	defer server.Shutdown()

	parser := flags.NewParser(server, flags.Default)
	parser.ShortDescription = "DataHive RESTful APIs"
	parser.LongDescription = swaggerSpec.Spec().Info.Description

	server.ConfigureFlags()
	for _, optsGroup := range api.CommandLineOptionsGroups {
		_, err := parser.AddGroup(optsGroup.ShortDescription, optsGroup.LongDescription, optsGroup.Options)
		if err != nil {
			log.Fatalln(err)
		}
	}

	if _, err := parser.Parse(); err != nil {
		code := 1
		if fe, ok := err.(*flags.Error); ok {
			if fe.Type == flags.ErrHelp {
				code = 0
			}
		}
		os.Exit(code)
	}

	server.ConfigureAPI()

	if err := server.Serve(); err != nil {
		log.Fatalln(err)
	}

}
