// Code generated by go-swagger; DO NOT EDIT.

package schema_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ResetCurrentDsUsingPUTHandlerFunc turns a function with the right signature into a reset current ds using p u t handler
type ResetCurrentDsUsingPUTHandlerFunc func(ResetCurrentDsUsingPUTParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ResetCurrentDsUsingPUTHandlerFunc) Handle(params ResetCurrentDsUsingPUTParams) middleware.Responder {
	return fn(params)
}

// ResetCurrentDsUsingPUTHandler interface for that can handle valid reset current ds using p u t params
type ResetCurrentDsUsingPUTHandler interface {
	Handle(ResetCurrentDsUsingPUTParams) middleware.Responder
}

// NewResetCurrentDsUsingPUT creates a new http.Handler for the reset current ds using p u t operation
func NewResetCurrentDsUsingPUT(ctx *middleware.Context, handler ResetCurrentDsUsingPUTHandler) *ResetCurrentDsUsingPUT {
	return &ResetCurrentDsUsingPUT{Context: ctx, Handler: handler}
}

/*ResetCurrentDsUsingPUT swagger:route PUT /schemas/resetCurrentDs/{dataSourceId} schema-controller resetCurrentDsUsingPUT

resetCurrentDs

*/
type ResetCurrentDsUsingPUT struct {
	Context *middleware.Context
	Handler ResetCurrentDsUsingPUTHandler
}

func (o *ResetCurrentDsUsingPUT) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewResetCurrentDsUsingPUTParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
