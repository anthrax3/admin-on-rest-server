// Code generated by go-swagger; DO NOT EDIT.

package schema_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// FindOneFieldUsingGETHandlerFunc turns a function with the right signature into a find one field using g e t handler
type FindOneFieldUsingGETHandlerFunc func(FindOneFieldUsingGETParams) middleware.Responder

// Handle executing the request and returning a response
func (fn FindOneFieldUsingGETHandlerFunc) Handle(params FindOneFieldUsingGETParams) middleware.Responder {
	return fn(params)
}

// FindOneFieldUsingGETHandler interface for that can handle valid find one field using g e t params
type FindOneFieldUsingGETHandler interface {
	Handle(FindOneFieldUsingGETParams) middleware.Responder
}

// NewFindOneFieldUsingGET creates a new http.Handler for the find one field using g e t operation
func NewFindOneFieldUsingGET(ctx *middleware.Context, handler FindOneFieldUsingGETHandler) *FindOneFieldUsingGET {
	return &FindOneFieldUsingGET{Context: ctx, Handler: handler}
}

/*FindOneFieldUsingGET swagger:route GET /schemas/_fields/{fid} schema-controller findOneFieldUsingGET

findOneField

*/
type FindOneFieldUsingGET struct {
	Context *middleware.Context
	Handler FindOneFieldUsingGETHandler
}

func (o *FindOneFieldUsingGET) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewFindOneFieldUsingGETParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
