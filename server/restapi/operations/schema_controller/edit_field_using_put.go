// Code generated by go-swagger; DO NOT EDIT.

package schema_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// EditFieldUsingPUTHandlerFunc turns a function with the right signature into a edit field using p u t handler
type EditFieldUsingPUTHandlerFunc func(EditFieldUsingPUTParams) middleware.Responder

// Handle executing the request and returning a response
func (fn EditFieldUsingPUTHandlerFunc) Handle(params EditFieldUsingPUTParams) middleware.Responder {
	return fn(params)
}

// EditFieldUsingPUTHandler interface for that can handle valid edit field using p u t params
type EditFieldUsingPUTHandler interface {
	Handle(EditFieldUsingPUTParams) middleware.Responder
}

// NewEditFieldUsingPUT creates a new http.Handler for the edit field using p u t operation
func NewEditFieldUsingPUT(ctx *middleware.Context, handler EditFieldUsingPUTHandler) *EditFieldUsingPUT {
	return &EditFieldUsingPUT{Context: ctx, Handler: handler}
}

/*EditFieldUsingPUT swagger:route PUT /schemas/_fields/put/{id} schema-controller editFieldUsingPUT

editField

*/
type EditFieldUsingPUT struct {
	Context *middleware.Context
	Handler EditFieldUsingPUTHandler
}

func (o *EditFieldUsingPUT) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewEditFieldUsingPUTParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
