// Code generated by go-swagger; DO NOT EDIT.

package apply_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ApplyUsingPOSTHandlerFunc turns a function with the right signature into a apply using p o s t handler
type ApplyUsingPOSTHandlerFunc func(ApplyUsingPOSTParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ApplyUsingPOSTHandlerFunc) Handle(params ApplyUsingPOSTParams) middleware.Responder {
	return fn(params)
}

// ApplyUsingPOSTHandler interface for that can handle valid apply using p o s t params
type ApplyUsingPOSTHandler interface {
	Handle(ApplyUsingPOSTParams) middleware.Responder
}

// NewApplyUsingPOST creates a new http.Handler for the apply using p o s t operation
func NewApplyUsingPOST(ctx *middleware.Context, handler ApplyUsingPOSTHandler) *ApplyUsingPOST {
	return &ApplyUsingPOST{Context: ctx, Handler: handler}
}

/*ApplyUsingPOST swagger:route POST /apply apply-controller applyUsingPOST

apply

*/
type ApplyUsingPOST struct {
	Context *middleware.Context
	Handler ApplyUsingPOSTHandler
}

func (o *ApplyUsingPOST) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewApplyUsingPOSTParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
