// Code generated by go-swagger; DO NOT EDIT.

package data_source_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// EditDataSourceUsingPUTHandlerFunc turns a function with the right signature into a edit data source using p u t handler
type EditDataSourceUsingPUTHandlerFunc func(EditDataSourceUsingPUTParams) middleware.Responder

// Handle executing the request and returning a response
func (fn EditDataSourceUsingPUTHandlerFunc) Handle(params EditDataSourceUsingPUTParams) middleware.Responder {
	return fn(params)
}

// EditDataSourceUsingPUTHandler interface for that can handle valid edit data source using p u t params
type EditDataSourceUsingPUTHandler interface {
	Handle(EditDataSourceUsingPUTParams) middleware.Responder
}

// NewEditDataSourceUsingPUT creates a new http.Handler for the edit data source using p u t operation
func NewEditDataSourceUsingPUT(ctx *middleware.Context, handler EditDataSourceUsingPUTHandler) *EditDataSourceUsingPUT {
	return &EditDataSourceUsingPUT{Context: ctx, Handler: handler}
}

/*EditDataSourceUsingPUT swagger:route PUT /datasource/_datasource/put/{id} data-source-controller editDataSourceUsingPUT

editDataSource

*/
type EditDataSourceUsingPUT struct {
	Context *middleware.Context
	Handler EditDataSourceUsingPUTHandler
}

func (o *EditDataSourceUsingPUT) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewEditDataSourceUsingPUTParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
