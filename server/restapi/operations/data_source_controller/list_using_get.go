// Code generated by go-swagger; DO NOT EDIT.

package data_source_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ListUsingGETHandlerFunc turns a function with the right signature into a list using g e t handler
type ListUsingGETHandlerFunc func(ListUsingGETParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListUsingGETHandlerFunc) Handle(params ListUsingGETParams) middleware.Responder {
	return fn(params)
}

// ListUsingGETHandler interface for that can handle valid list using g e t params
type ListUsingGETHandler interface {
	Handle(ListUsingGETParams) middleware.Responder
}

// NewListUsingGET creates a new http.Handler for the list using g e t operation
func NewListUsingGET(ctx *middleware.Context, handler ListUsingGETHandler) *ListUsingGET {
	return &ListUsingGET{Context: ctx, Handler: handler}
}

/*ListUsingGET swagger:route GET /datasource/_datasource data-source-controller listUsingGET

list

*/
type ListUsingGET struct {
	Context *middleware.Context
	Handler ListUsingGETHandler
}

func (o *ListUsingGET) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListUsingGETParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
