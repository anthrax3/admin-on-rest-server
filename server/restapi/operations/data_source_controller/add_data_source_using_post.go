// Code generated by go-swagger; DO NOT EDIT.

package data_source_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// AddDataSourceUsingPOSTHandlerFunc turns a function with the right signature into a add data source using p o s t handler
type AddDataSourceUsingPOSTHandlerFunc func(AddDataSourceUsingPOSTParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AddDataSourceUsingPOSTHandlerFunc) Handle(params AddDataSourceUsingPOSTParams) middleware.Responder {
	return fn(params)
}

// AddDataSourceUsingPOSTHandler interface for that can handle valid add data source using p o s t params
type AddDataSourceUsingPOSTHandler interface {
	Handle(AddDataSourceUsingPOSTParams) middleware.Responder
}

// NewAddDataSourceUsingPOST creates a new http.Handler for the add data source using p o s t operation
func NewAddDataSourceUsingPOST(ctx *middleware.Context, handler AddDataSourceUsingPOSTHandler) *AddDataSourceUsingPOST {
	return &AddDataSourceUsingPOST{Context: ctx, Handler: handler}
}

/*AddDataSourceUsingPOST swagger:route POST /datasource/_datasource data-source-controller addDataSourceUsingPOST

addDataSource

*/
type AddDataSourceUsingPOST struct {
	Context *middleware.Context
	Handler AddDataSourceUsingPOSTHandler
}

func (o *AddDataSourceUsingPOST) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAddDataSourceUsingPOSTParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
