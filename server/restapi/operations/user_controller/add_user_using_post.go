// Code generated by go-swagger; DO NOT EDIT.

package user_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// AddUserUsingPOSTHandlerFunc turns a function with the right signature into a add user using p o s t handler
type AddUserUsingPOSTHandlerFunc func(AddUserUsingPOSTParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AddUserUsingPOSTHandlerFunc) Handle(params AddUserUsingPOSTParams) middleware.Responder {
	return fn(params)
}

// AddUserUsingPOSTHandler interface for that can handle valid add user using p o s t params
type AddUserUsingPOSTHandler interface {
	Handle(AddUserUsingPOSTParams) middleware.Responder
}

// NewAddUserUsingPOST creates a new http.Handler for the add user using p o s t operation
func NewAddUserUsingPOST(ctx *middleware.Context, handler AddUserUsingPOSTHandler) *AddUserUsingPOST {
	return &AddUserUsingPOST{Context: ctx, Handler: handler}
}

/*AddUserUsingPOST swagger:route POST /user/_users user-controller addUserUsingPOST

addUser

*/
type AddUserUsingPOST struct {
	Context *middleware.Context
	Handler AddUserUsingPOSTHandler
}

func (o *AddUserUsingPOST) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAddUserUsingPOSTParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
