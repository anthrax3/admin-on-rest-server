// Code generated by go-swagger; DO NOT EDIT.

package role_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ListUsingGET2HandlerFunc turns a function with the right signature into a list using g e t 2 handler
type ListUsingGET2HandlerFunc func(ListUsingGET2Params) middleware.Responder

// Handle executing the request and returning a response
func (fn ListUsingGET2HandlerFunc) Handle(params ListUsingGET2Params) middleware.Responder {
	return fn(params)
}

// ListUsingGET2Handler interface for that can handle valid list using g e t 2 params
type ListUsingGET2Handler interface {
	Handle(ListUsingGET2Params) middleware.Responder
}

// NewListUsingGET2 creates a new http.Handler for the list using g e t 2 operation
func NewListUsingGET2(ctx *middleware.Context, handler ListUsingGET2Handler) *ListUsingGET2 {
	return &ListUsingGET2{Context: ctx, Handler: handler}
}

/*ListUsingGET2 swagger:route GET /role/_roles role-controller listUsingGET2

list

*/
type ListUsingGET2 struct {
	Context *middleware.Context
	Handler ListUsingGET2Handler
}

func (o *ListUsingGET2) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListUsingGET2Params()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
