// Code generated by go-swagger; DO NOT EDIT.

package role_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// FindRoleUsingGET1HandlerFunc turns a function with the right signature into a find role using g e t 1 handler
type FindRoleUsingGET1HandlerFunc func(FindRoleUsingGET1Params) middleware.Responder

// Handle executing the request and returning a response
func (fn FindRoleUsingGET1HandlerFunc) Handle(params FindRoleUsingGET1Params) middleware.Responder {
	return fn(params)
}

// FindRoleUsingGET1Handler interface for that can handle valid find role using g e t 1 params
type FindRoleUsingGET1Handler interface {
	Handle(FindRoleUsingGET1Params) middleware.Responder
}

// NewFindRoleUsingGET1 creates a new http.Handler for the find role using g e t 1 operation
func NewFindRoleUsingGET1(ctx *middleware.Context, handler FindRoleUsingGET1Handler) *FindRoleUsingGET1 {
	return &FindRoleUsingGET1{Context: ctx, Handler: handler}
}

/*FindRoleUsingGET1 swagger:route GET /role/_roles/{roleId} role-controller findRoleUsingGET1

findRole

*/
type FindRoleUsingGET1 struct {
	Context *middleware.Context
	Handler FindRoleUsingGET1Handler
}

func (o *FindRoleUsingGET1) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewFindRoleUsingGET1Params()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
