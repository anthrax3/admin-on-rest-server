// Code generated by go-swagger; DO NOT EDIT.

package role_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// AddRoleUsingPOSTHandlerFunc turns a function with the right signature into a add role using p o s t handler
type AddRoleUsingPOSTHandlerFunc func(AddRoleUsingPOSTParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AddRoleUsingPOSTHandlerFunc) Handle(params AddRoleUsingPOSTParams) middleware.Responder {
	return fn(params)
}

// AddRoleUsingPOSTHandler interface for that can handle valid add role using p o s t params
type AddRoleUsingPOSTHandler interface {
	Handle(AddRoleUsingPOSTParams) middleware.Responder
}

// NewAddRoleUsingPOST creates a new http.Handler for the add role using p o s t operation
func NewAddRoleUsingPOST(ctx *middleware.Context, handler AddRoleUsingPOSTHandler) *AddRoleUsingPOST {
	return &AddRoleUsingPOST{Context: ctx, Handler: handler}
}

/*AddRoleUsingPOST swagger:route POST /role/_roles role-controller addRoleUsingPOST

addRole

*/
type AddRoleUsingPOST struct {
	Context *middleware.Context
	Handler AddRoleUsingPOSTHandler
}

func (o *AddRoleUsingPOST) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAddRoleUsingPOSTParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
