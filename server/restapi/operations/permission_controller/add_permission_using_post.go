// Code generated by go-swagger; DO NOT EDIT.

package permission_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// AddPermissionUsingPOSTHandlerFunc turns a function with the right signature into a add permission using p o s t handler
type AddPermissionUsingPOSTHandlerFunc func(AddPermissionUsingPOSTParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AddPermissionUsingPOSTHandlerFunc) Handle(params AddPermissionUsingPOSTParams) middleware.Responder {
	return fn(params)
}

// AddPermissionUsingPOSTHandler interface for that can handle valid add permission using p o s t params
type AddPermissionUsingPOSTHandler interface {
	Handle(AddPermissionUsingPOSTParams) middleware.Responder
}

// NewAddPermissionUsingPOST creates a new http.Handler for the add permission using p o s t operation
func NewAddPermissionUsingPOST(ctx *middleware.Context, handler AddPermissionUsingPOSTHandler) *AddPermissionUsingPOST {
	return &AddPermissionUsingPOST{Context: ctx, Handler: handler}
}

/*AddPermissionUsingPOST swagger:route POST /permission/_permission permission-controller addPermissionUsingPOST

addPermission

*/
type AddPermissionUsingPOST struct {
	Context *middleware.Context
	Handler AddPermissionUsingPOSTHandler
}

func (o *AddPermissionUsingPOST) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAddPermissionUsingPOSTParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
