// Code generated by go-swagger; DO NOT EDIT.

package permission_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// EditPermissionUsingPUTHandlerFunc turns a function with the right signature into a edit permission using p u t handler
type EditPermissionUsingPUTHandlerFunc func(EditPermissionUsingPUTParams) middleware.Responder

// Handle executing the request and returning a response
func (fn EditPermissionUsingPUTHandlerFunc) Handle(params EditPermissionUsingPUTParams) middleware.Responder {
	return fn(params)
}

// EditPermissionUsingPUTHandler interface for that can handle valid edit permission using p u t params
type EditPermissionUsingPUTHandler interface {
	Handle(EditPermissionUsingPUTParams) middleware.Responder
}

// NewEditPermissionUsingPUT creates a new http.Handler for the edit permission using p u t operation
func NewEditPermissionUsingPUT(ctx *middleware.Context, handler EditPermissionUsingPUTHandler) *EditPermissionUsingPUT {
	return &EditPermissionUsingPUT{Context: ctx, Handler: handler}
}

/*EditPermissionUsingPUT swagger:route PUT /permission/_permission/{id} permission-controller editPermissionUsingPUT

editPermission

*/
type EditPermissionUsingPUT struct {
	Context *middleware.Context
	Handler EditPermissionUsingPUTHandler
}

func (o *EditPermissionUsingPUT) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewEditPermissionUsingPUTParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
