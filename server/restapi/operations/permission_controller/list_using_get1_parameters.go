// Code generated by go-swagger; DO NOT EDIT.

package permission_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListUsingGET1Params creates a new ListUsingGET1Params object
// with the default values initialized.
func NewListUsingGET1Params() ListUsingGET1Params {
	var ()
	return ListUsingGET1Params{}
}

// ListUsingGET1Params contains all the bound params for the list using g e t 1 operation
// typically these are obtained from a http.Request
//
// swagger:parameters listUsingGET_1
type ListUsingGET1Params struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*roleId
	  Required: true
	  In: query
	*/
	RoleID string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *ListUsingGET1Params) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qRoleID, qhkRoleID, _ := qs.GetOK("roleId")
	if err := o.bindRoleID(qRoleID, qhkRoleID, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListUsingGET1Params) bindRoleID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("roleId", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("roleId", "query", raw); err != nil {
		return err
	}

	o.RoleID = raw

	return nil
}
