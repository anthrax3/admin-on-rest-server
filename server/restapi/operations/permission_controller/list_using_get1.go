// Code generated by go-swagger; DO NOT EDIT.

package permission_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ListUsingGET1HandlerFunc turns a function with the right signature into a list using g e t 1 handler
type ListUsingGET1HandlerFunc func(ListUsingGET1Params) middleware.Responder

// Handle executing the request and returning a response
func (fn ListUsingGET1HandlerFunc) Handle(params ListUsingGET1Params) middleware.Responder {
	return fn(params)
}

// ListUsingGET1Handler interface for that can handle valid list using g e t 1 params
type ListUsingGET1Handler interface {
	Handle(ListUsingGET1Params) middleware.Responder
}

// NewListUsingGET1 creates a new http.Handler for the list using g e t 1 operation
func NewListUsingGET1(ctx *middleware.Context, handler ListUsingGET1Handler) *ListUsingGET1 {
	return &ListUsingGET1{Context: ctx, Handler: handler}
}

/*ListUsingGET1 swagger:route GET /permission/_permission permission-controller listUsingGET1

list

*/
type ListUsingGET1 struct {
	Context *middleware.Context
	Handler ListUsingGET1Handler
}

func (o *ListUsingGET1) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListUsingGET1Params()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
