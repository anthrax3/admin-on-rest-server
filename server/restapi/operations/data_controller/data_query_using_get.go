// Code generated by go-swagger; DO NOT EDIT.

package data_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	validate "github.com/go-openapi/validate"
)

// DataQueryUsingGETHandlerFunc turns a function with the right signature into a data query using g e t handler
type DataQueryUsingGETHandlerFunc func(DataQueryUsingGETParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DataQueryUsingGETHandlerFunc) Handle(params DataQueryUsingGETParams) middleware.Responder {
	return fn(params)
}

// DataQueryUsingGETHandler interface for that can handle valid data query using g e t params
type DataQueryUsingGETHandler interface {
	Handle(DataQueryUsingGETParams) middleware.Responder
}

// NewDataQueryUsingGET creates a new http.Handler for the data query using g e t operation
func NewDataQueryUsingGET(ctx *middleware.Context, handler DataQueryUsingGETHandler) *DataQueryUsingGET {
	return &DataQueryUsingGET{Context: ctx, Handler: handler}
}

/*DataQueryUsingGET swagger:route GET /api/{entity} data-controller dataQueryUsingGET

dataQuery

*/
type DataQueryUsingGET struct {
	Context *middleware.Context
	Handler DataQueryUsingGETHandler
}

func (o *DataQueryUsingGET) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDataQueryUsingGETParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// DataQueryUsingGETOKBody data query using g e t o k body
// swagger:model DataQueryUsingGETOKBody
type DataQueryUsingGETOKBody map[string]interface{}

// Validate validates this data query using g e t o k body
func (o DataQueryUsingGETOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := validate.Required("dataQueryUsingGETOK", "body", o); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
