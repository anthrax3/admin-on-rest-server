// Code generated by go-swagger; DO NOT EDIT.

package data_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	validate "github.com/go-openapi/validate"
)

// DataMutationUsingPOSTHandlerFunc turns a function with the right signature into a data mutation using p o s t handler
type DataMutationUsingPOSTHandlerFunc func(DataMutationUsingPOSTParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DataMutationUsingPOSTHandlerFunc) Handle(params DataMutationUsingPOSTParams) middleware.Responder {
	return fn(params)
}

// DataMutationUsingPOSTHandler interface for that can handle valid data mutation using p o s t params
type DataMutationUsingPOSTHandler interface {
	Handle(DataMutationUsingPOSTParams) middleware.Responder
}

// NewDataMutationUsingPOST creates a new http.Handler for the data mutation using p o s t operation
func NewDataMutationUsingPOST(ctx *middleware.Context, handler DataMutationUsingPOSTHandler) *DataMutationUsingPOST {
	return &DataMutationUsingPOST{Context: ctx, Handler: handler}
}

/*DataMutationUsingPOST swagger:route POST /api/{entity} data-controller dataMutationUsingPOST

dataMutation

*/
type DataMutationUsingPOST struct {
	Context *middleware.Context
	Handler DataMutationUsingPOSTHandler
}

func (o *DataMutationUsingPOST) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDataMutationUsingPOSTParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// DataMutationUsingPOSTOKBody data mutation using p o s t o k body
// swagger:model DataMutationUsingPOSTOKBody
type DataMutationUsingPOSTOKBody map[string]interface{}

// Validate validates this data mutation using p o s t o k body
func (o DataMutationUsingPOSTOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := validate.Required("dataMutationUsingPOSTOK", "body", o); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
