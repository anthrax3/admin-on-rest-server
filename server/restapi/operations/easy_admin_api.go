// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/roscopecoltran/admin-on-rest-server/server/restapi/operations/apply_controller"
	"github.com/roscopecoltran/admin-on-rest-server/server/restapi/operations/authentication_rest_controller"
	"github.com/roscopecoltran/admin-on-rest-server/server/restapi/operations/data_controller"
	"github.com/roscopecoltran/admin-on-rest-server/server/restapi/operations/data_source_controller"
	"github.com/roscopecoltran/admin-on-rest-server/server/restapi/operations/permission_controller"
	"github.com/roscopecoltran/admin-on-rest-server/server/restapi/operations/role_controller"
	"github.com/roscopecoltran/admin-on-rest-server/server/restapi/operations/schema_controller"
	"github.com/roscopecoltran/admin-on-rest-server/server/restapi/operations/user_controller"
)

// NewEasyAdminAPI creates a new EasyAdmin instance
func NewEasyAdminAPI(spec *loads.Document) *EasyAdminAPI {
	return &EasyAdminAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,
		JSONConsumer:        runtime.JSONConsumer(),
		JSONProducer:        runtime.JSONProducer(),
		DataSourceControllerAddDataSourceUsingPOSTHandler: data_source_controller.AddDataSourceUsingPOSTHandlerFunc(func(params data_source_controller.AddDataSourceUsingPOSTParams) middleware.Responder {
			return middleware.NotImplemented("operation DataSourceControllerAddDataSourceUsingPOST has not yet been implemented")
		}),
		SchemaControllerAddEntityUsingPOSTHandler: schema_controller.AddEntityUsingPOSTHandlerFunc(func(params schema_controller.AddEntityUsingPOSTParams) middleware.Responder {
			return middleware.NotImplemented("operation SchemaControllerAddEntityUsingPOST has not yet been implemented")
		}),
		SchemaControllerAddFieldUsingPOSTHandler: schema_controller.AddFieldUsingPOSTHandlerFunc(func(params schema_controller.AddFieldUsingPOSTParams) middleware.Responder {
			return middleware.NotImplemented("operation SchemaControllerAddFieldUsingPOST has not yet been implemented")
		}),
		PermissionControllerAddPermissionUsingPOSTHandler: permission_controller.AddPermissionUsingPOSTHandlerFunc(func(params permission_controller.AddPermissionUsingPOSTParams) middleware.Responder {
			return middleware.NotImplemented("operation PermissionControllerAddPermissionUsingPOST has not yet been implemented")
		}),
		RoleControllerAddRoleUsingPOSTHandler: role_controller.AddRoleUsingPOSTHandlerFunc(func(params role_controller.AddRoleUsingPOSTParams) middleware.Responder {
			return middleware.NotImplemented("operation RoleControllerAddRoleUsingPOST has not yet been implemented")
		}),
		UserControllerAddUserUsingPOSTHandler: user_controller.AddUserUsingPOSTHandlerFunc(func(params user_controller.AddUserUsingPOSTParams) middleware.Responder {
			return middleware.NotImplemented("operation UserControllerAddUserUsingPOST has not yet been implemented")
		}),
		ApplyControllerApplyUsingPOSTHandler: apply_controller.ApplyUsingPOSTHandlerFunc(func(params apply_controller.ApplyUsingPOSTParams) middleware.Responder {
			return middleware.NotImplemented("operation ApplyControllerApplyUsingPOST has not yet been implemented")
		}),
		AuthenticationRestControllerCreateAuthenticationTokenUsingPOSTHandler: authentication_rest_controller.CreateAuthenticationTokenUsingPOSTHandlerFunc(func(params authentication_rest_controller.CreateAuthenticationTokenUsingPOSTParams) middleware.Responder {
			return middleware.NotImplemented("operation AuthenticationRestControllerCreateAuthenticationTokenUsingPOST has not yet been implemented")
		}),
		DataControllerDataMutationUsingDELETEHandler: data_controller.DataMutationUsingDELETEHandlerFunc(func(params data_controller.DataMutationUsingDELETEParams) middleware.Responder {
			return middleware.NotImplemented("operation DataControllerDataMutationUsingDELETE has not yet been implemented")
		}),
		DataControllerDataMutationUsingPOSTHandler: data_controller.DataMutationUsingPOSTHandlerFunc(func(params data_controller.DataMutationUsingPOSTParams) middleware.Responder {
			return middleware.NotImplemented("operation DataControllerDataMutationUsingPOST has not yet been implemented")
		}),
		DataControllerDataMutationUsingPUTHandler: data_controller.DataMutationUsingPUTHandlerFunc(func(params data_controller.DataMutationUsingPUTParams) middleware.Responder {
			return middleware.NotImplemented("operation DataControllerDataMutationUsingPUT has not yet been implemented")
		}),
		DataControllerDataQueryUsingGETHandler: data_controller.DataQueryUsingGETHandlerFunc(func(params data_controller.DataQueryUsingGETParams) middleware.Responder {
			return middleware.NotImplemented("operation DataControllerDataQueryUsingGET has not yet been implemented")
		}),
		DataSourceControllerEditDataSourceUsingPUTHandler: data_source_controller.EditDataSourceUsingPUTHandlerFunc(func(params data_source_controller.EditDataSourceUsingPUTParams) middleware.Responder {
			return middleware.NotImplemented("operation DataSourceControllerEditDataSourceUsingPUT has not yet been implemented")
		}),
		SchemaControllerEditEntityUsingPUTHandler: schema_controller.EditEntityUsingPUTHandlerFunc(func(params schema_controller.EditEntityUsingPUTParams) middleware.Responder {
			return middleware.NotImplemented("operation SchemaControllerEditEntityUsingPUT has not yet been implemented")
		}),
		SchemaControllerEditFieldUsingPUTHandler: schema_controller.EditFieldUsingPUTHandlerFunc(func(params schema_controller.EditFieldUsingPUTParams) middleware.Responder {
			return middleware.NotImplemented("operation SchemaControllerEditFieldUsingPUT has not yet been implemented")
		}),
		UserControllerEditFieldUsingPUT1Handler: user_controller.EditFieldUsingPUT1HandlerFunc(func(params user_controller.EditFieldUsingPUT1Params) middleware.Responder {
			return middleware.NotImplemented("operation UserControllerEditFieldUsingPUT1 has not yet been implemented")
		}),
		PermissionControllerEditPermissionUsingPUTHandler: permission_controller.EditPermissionUsingPUTHandlerFunc(func(params permission_controller.EditPermissionUsingPUTParams) middleware.Responder {
			return middleware.NotImplemented("operation PermissionControllerEditPermissionUsingPUT has not yet been implemented")
		}),
		RoleControllerEditRoleUsingPUTHandler: role_controller.EditRoleUsingPUTHandlerFunc(func(params role_controller.EditRoleUsingPUTParams) middleware.Responder {
			return middleware.NotImplemented("operation RoleControllerEditRoleUsingPUT has not yet been implemented")
		}),
		SchemaControllerFindAllFieldsUsingGETHandler: schema_controller.FindAllFieldsUsingGETHandlerFunc(func(params schema_controller.FindAllFieldsUsingGETParams) middleware.Responder {
			return middleware.NotImplemented("operation SchemaControllerFindAllFieldsUsingGET has not yet been implemented")
		}),
		SchemaControllerFindEntityFieldsUsingGETHandler: schema_controller.FindEntityFieldsUsingGETHandlerFunc(func(params schema_controller.FindEntityFieldsUsingGETParams) middleware.Responder {
			return middleware.NotImplemented("operation SchemaControllerFindEntityFieldsUsingGET has not yet been implemented")
		}),
		SchemaControllerFindOneFieldUsingGETHandler: schema_controller.FindOneFieldUsingGETHandlerFunc(func(params schema_controller.FindOneFieldUsingGETParams) middleware.Responder {
			return middleware.NotImplemented("operation SchemaControllerFindOneFieldUsingGET has not yet been implemented")
		}),
		DataControllerFindOneUsingGETHandler: data_controller.FindOneUsingGETHandlerFunc(func(params data_controller.FindOneUsingGETParams) middleware.Responder {
			return middleware.NotImplemented("operation DataControllerFindOneUsingGET has not yet been implemented")
		}),
		SchemaControllerFindOneUsingGET1Handler: schema_controller.FindOneUsingGET1HandlerFunc(func(params schema_controller.FindOneUsingGET1Params) middleware.Responder {
			return middleware.NotImplemented("operation SchemaControllerFindOneUsingGET1 has not yet been implemented")
		}),
		DataSourceControllerFindRoleUsingGETHandler: data_source_controller.FindRoleUsingGETHandlerFunc(func(params data_source_controller.FindRoleUsingGETParams) middleware.Responder {
			return middleware.NotImplemented("operation DataSourceControllerFindRoleUsingGET has not yet been implemented")
		}),
		RoleControllerFindRoleUsingGET1Handler: role_controller.FindRoleUsingGET1HandlerFunc(func(params role_controller.FindRoleUsingGET1Params) middleware.Responder {
			return middleware.NotImplemented("operation RoleControllerFindRoleUsingGET1 has not yet been implemented")
		}),
		PermissionControllerFindUserUsingGETHandler: permission_controller.FindUserUsingGETHandlerFunc(func(params permission_controller.FindUserUsingGETParams) middleware.Responder {
			return middleware.NotImplemented("operation PermissionControllerFindUserUsingGET has not yet been implemented")
		}),
		UserControllerFindUserUsingGET1Handler: user_controller.FindUserUsingGET1HandlerFunc(func(params user_controller.FindUserUsingGET1Params) middleware.Responder {
			return middleware.NotImplemented("operation UserControllerFindUserUsingGET1 has not yet been implemented")
		}),
		UserControllerGetAuthenticatedUserUsingGETHandler: user_controller.GetAuthenticatedUserUsingGETHandlerFunc(func(params user_controller.GetAuthenticatedUserUsingGETParams) middleware.Responder {
			return middleware.NotImplemented("operation UserControllerGetAuthenticatedUserUsingGET has not yet been implemented")
		}),
		SchemaControllerGetSchemasUsingGETHandler: schema_controller.GetSchemasUsingGETHandlerFunc(func(params schema_controller.GetSchemasUsingGETParams) middleware.Responder {
			return middleware.NotImplemented("operation SchemaControllerGetSchemasUsingGET has not yet been implemented")
		}),
		DataSourceControllerListUsingGETHandler: data_source_controller.ListUsingGETHandlerFunc(func(params data_source_controller.ListUsingGETParams) middleware.Responder {
			return middleware.NotImplemented("operation DataSourceControllerListUsingGET has not yet been implemented")
		}),
		PermissionControllerListUsingGET1Handler: permission_controller.ListUsingGET1HandlerFunc(func(params permission_controller.ListUsingGET1Params) middleware.Responder {
			return middleware.NotImplemented("operation PermissionControllerListUsingGET1 has not yet been implemented")
		}),
		RoleControllerListUsingGET2Handler: role_controller.ListUsingGET2HandlerFunc(func(params role_controller.ListUsingGET2Params) middleware.Responder {
			return middleware.NotImplemented("operation RoleControllerListUsingGET2 has not yet been implemented")
		}),
		UserControllerListUsingGET3Handler: user_controller.ListUsingGET3HandlerFunc(func(params user_controller.ListUsingGET3Params) middleware.Responder {
			return middleware.NotImplemented("operation UserControllerListUsingGET3 has not yet been implemented")
		}),
		AuthenticationRestControllerRefreshAndGetAuthenticationTokenUsingGETHandler: authentication_rest_controller.RefreshAndGetAuthenticationTokenUsingGETHandlerFunc(func(params authentication_rest_controller.RefreshAndGetAuthenticationTokenUsingGETParams) middleware.Responder {
			return middleware.NotImplemented("operation AuthenticationRestControllerRefreshAndGetAuthenticationTokenUsingGET has not yet been implemented")
		}),
		SchemaControllerResetCurrentDsUsingPUTHandler: schema_controller.ResetCurrentDsUsingPUTHandlerFunc(func(params schema_controller.ResetCurrentDsUsingPUTParams) middleware.Responder {
			return middleware.NotImplemented("operation SchemaControllerResetCurrentDsUsingPUT has not yet been implemented")
		}),
		SchemaControllerSyncSchemasUsingPUTHandler: schema_controller.SyncSchemasUsingPUTHandlerFunc(func(params schema_controller.SyncSchemasUsingPUTParams) middleware.Responder {
			return middleware.NotImplemented("operation SchemaControllerSyncSchemasUsingPUT has not yet been implemented")
		}),
	}
}

/*EasyAdminAPI the easy admin API */
type EasyAdminAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer

	// DataSourceControllerAddDataSourceUsingPOSTHandler sets the operation handler for the add data source using p o s t operation
	DataSourceControllerAddDataSourceUsingPOSTHandler data_source_controller.AddDataSourceUsingPOSTHandler
	// SchemaControllerAddEntityUsingPOSTHandler sets the operation handler for the add entity using p o s t operation
	SchemaControllerAddEntityUsingPOSTHandler schema_controller.AddEntityUsingPOSTHandler
	// SchemaControllerAddFieldUsingPOSTHandler sets the operation handler for the add field using p o s t operation
	SchemaControllerAddFieldUsingPOSTHandler schema_controller.AddFieldUsingPOSTHandler
	// PermissionControllerAddPermissionUsingPOSTHandler sets the operation handler for the add permission using p o s t operation
	PermissionControllerAddPermissionUsingPOSTHandler permission_controller.AddPermissionUsingPOSTHandler
	// RoleControllerAddRoleUsingPOSTHandler sets the operation handler for the add role using p o s t operation
	RoleControllerAddRoleUsingPOSTHandler role_controller.AddRoleUsingPOSTHandler
	// UserControllerAddUserUsingPOSTHandler sets the operation handler for the add user using p o s t operation
	UserControllerAddUserUsingPOSTHandler user_controller.AddUserUsingPOSTHandler
	// ApplyControllerApplyUsingPOSTHandler sets the operation handler for the apply using p o s t operation
	ApplyControllerApplyUsingPOSTHandler apply_controller.ApplyUsingPOSTHandler
	// AuthenticationRestControllerCreateAuthenticationTokenUsingPOSTHandler sets the operation handler for the create authentication token using p o s t operation
	AuthenticationRestControllerCreateAuthenticationTokenUsingPOSTHandler authentication_rest_controller.CreateAuthenticationTokenUsingPOSTHandler
	// DataControllerDataMutationUsingDELETEHandler sets the operation handler for the data mutation using d e l e t e operation
	DataControllerDataMutationUsingDELETEHandler data_controller.DataMutationUsingDELETEHandler
	// DataControllerDataMutationUsingPOSTHandler sets the operation handler for the data mutation using p o s t operation
	DataControllerDataMutationUsingPOSTHandler data_controller.DataMutationUsingPOSTHandler
	// DataControllerDataMutationUsingPUTHandler sets the operation handler for the data mutation using p u t operation
	DataControllerDataMutationUsingPUTHandler data_controller.DataMutationUsingPUTHandler
	// DataControllerDataQueryUsingGETHandler sets the operation handler for the data query using g e t operation
	DataControllerDataQueryUsingGETHandler data_controller.DataQueryUsingGETHandler
	// DataSourceControllerEditDataSourceUsingPUTHandler sets the operation handler for the edit data source using p u t operation
	DataSourceControllerEditDataSourceUsingPUTHandler data_source_controller.EditDataSourceUsingPUTHandler
	// SchemaControllerEditEntityUsingPUTHandler sets the operation handler for the edit entity using p u t operation
	SchemaControllerEditEntityUsingPUTHandler schema_controller.EditEntityUsingPUTHandler
	// SchemaControllerEditFieldUsingPUTHandler sets the operation handler for the edit field using p u t operation
	SchemaControllerEditFieldUsingPUTHandler schema_controller.EditFieldUsingPUTHandler
	// UserControllerEditFieldUsingPUT1Handler sets the operation handler for the edit field using p u t 1 operation
	UserControllerEditFieldUsingPUT1Handler user_controller.EditFieldUsingPUT1Handler
	// PermissionControllerEditPermissionUsingPUTHandler sets the operation handler for the edit permission using p u t operation
	PermissionControllerEditPermissionUsingPUTHandler permission_controller.EditPermissionUsingPUTHandler
	// RoleControllerEditRoleUsingPUTHandler sets the operation handler for the edit role using p u t operation
	RoleControllerEditRoleUsingPUTHandler role_controller.EditRoleUsingPUTHandler
	// SchemaControllerFindAllFieldsUsingGETHandler sets the operation handler for the find all fields using g e t operation
	SchemaControllerFindAllFieldsUsingGETHandler schema_controller.FindAllFieldsUsingGETHandler
	// SchemaControllerFindEntityFieldsUsingGETHandler sets the operation handler for the find entity fields using g e t operation
	SchemaControllerFindEntityFieldsUsingGETHandler schema_controller.FindEntityFieldsUsingGETHandler
	// SchemaControllerFindOneFieldUsingGETHandler sets the operation handler for the find one field using g e t operation
	SchemaControllerFindOneFieldUsingGETHandler schema_controller.FindOneFieldUsingGETHandler
	// DataControllerFindOneUsingGETHandler sets the operation handler for the find one using g e t operation
	DataControllerFindOneUsingGETHandler data_controller.FindOneUsingGETHandler
	// SchemaControllerFindOneUsingGET1Handler sets the operation handler for the find one using g e t 1 operation
	SchemaControllerFindOneUsingGET1Handler schema_controller.FindOneUsingGET1Handler
	// DataSourceControllerFindRoleUsingGETHandler sets the operation handler for the find role using g e t operation
	DataSourceControllerFindRoleUsingGETHandler data_source_controller.FindRoleUsingGETHandler
	// RoleControllerFindRoleUsingGET1Handler sets the operation handler for the find role using g e t 1 operation
	RoleControllerFindRoleUsingGET1Handler role_controller.FindRoleUsingGET1Handler
	// PermissionControllerFindUserUsingGETHandler sets the operation handler for the find user using g e t operation
	PermissionControllerFindUserUsingGETHandler permission_controller.FindUserUsingGETHandler
	// UserControllerFindUserUsingGET1Handler sets the operation handler for the find user using g e t 1 operation
	UserControllerFindUserUsingGET1Handler user_controller.FindUserUsingGET1Handler
	// UserControllerGetAuthenticatedUserUsingGETHandler sets the operation handler for the get authenticated user using g e t operation
	UserControllerGetAuthenticatedUserUsingGETHandler user_controller.GetAuthenticatedUserUsingGETHandler
	// SchemaControllerGetSchemasUsingGETHandler sets the operation handler for the get schemas using g e t operation
	SchemaControllerGetSchemasUsingGETHandler schema_controller.GetSchemasUsingGETHandler
	// DataSourceControllerListUsingGETHandler sets the operation handler for the list using g e t operation
	DataSourceControllerListUsingGETHandler data_source_controller.ListUsingGETHandler
	// PermissionControllerListUsingGET1Handler sets the operation handler for the list using g e t 1 operation
	PermissionControllerListUsingGET1Handler permission_controller.ListUsingGET1Handler
	// RoleControllerListUsingGET2Handler sets the operation handler for the list using g e t 2 operation
	RoleControllerListUsingGET2Handler role_controller.ListUsingGET2Handler
	// UserControllerListUsingGET3Handler sets the operation handler for the list using g e t 3 operation
	UserControllerListUsingGET3Handler user_controller.ListUsingGET3Handler
	// AuthenticationRestControllerRefreshAndGetAuthenticationTokenUsingGETHandler sets the operation handler for the refresh and get authentication token using g e t operation
	AuthenticationRestControllerRefreshAndGetAuthenticationTokenUsingGETHandler authentication_rest_controller.RefreshAndGetAuthenticationTokenUsingGETHandler
	// SchemaControllerResetCurrentDsUsingPUTHandler sets the operation handler for the reset current ds using p u t operation
	SchemaControllerResetCurrentDsUsingPUTHandler schema_controller.ResetCurrentDsUsingPUTHandler
	// SchemaControllerSyncSchemasUsingPUTHandler sets the operation handler for the sync schemas using p u t operation
	SchemaControllerSyncSchemasUsingPUTHandler schema_controller.SyncSchemasUsingPUTHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *EasyAdminAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *EasyAdminAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *EasyAdminAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *EasyAdminAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *EasyAdminAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *EasyAdminAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *EasyAdminAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the EasyAdminAPI
func (o *EasyAdminAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.DataSourceControllerAddDataSourceUsingPOSTHandler == nil {
		unregistered = append(unregistered, "data_source_controller.AddDataSourceUsingPOSTHandler")
	}

	if o.SchemaControllerAddEntityUsingPOSTHandler == nil {
		unregistered = append(unregistered, "schema_controller.AddEntityUsingPOSTHandler")
	}

	if o.SchemaControllerAddFieldUsingPOSTHandler == nil {
		unregistered = append(unregistered, "schema_controller.AddFieldUsingPOSTHandler")
	}

	if o.PermissionControllerAddPermissionUsingPOSTHandler == nil {
		unregistered = append(unregistered, "permission_controller.AddPermissionUsingPOSTHandler")
	}

	if o.RoleControllerAddRoleUsingPOSTHandler == nil {
		unregistered = append(unregistered, "role_controller.AddRoleUsingPOSTHandler")
	}

	if o.UserControllerAddUserUsingPOSTHandler == nil {
		unregistered = append(unregistered, "user_controller.AddUserUsingPOSTHandler")
	}

	if o.ApplyControllerApplyUsingPOSTHandler == nil {
		unregistered = append(unregistered, "apply_controller.ApplyUsingPOSTHandler")
	}

	if o.AuthenticationRestControllerCreateAuthenticationTokenUsingPOSTHandler == nil {
		unregistered = append(unregistered, "authentication_rest_controller.CreateAuthenticationTokenUsingPOSTHandler")
	}

	if o.DataControllerDataMutationUsingDELETEHandler == nil {
		unregistered = append(unregistered, "data_controller.DataMutationUsingDELETEHandler")
	}

	if o.DataControllerDataMutationUsingPOSTHandler == nil {
		unregistered = append(unregistered, "data_controller.DataMutationUsingPOSTHandler")
	}

	if o.DataControllerDataMutationUsingPUTHandler == nil {
		unregistered = append(unregistered, "data_controller.DataMutationUsingPUTHandler")
	}

	if o.DataControllerDataQueryUsingGETHandler == nil {
		unregistered = append(unregistered, "data_controller.DataQueryUsingGETHandler")
	}

	if o.DataSourceControllerEditDataSourceUsingPUTHandler == nil {
		unregistered = append(unregistered, "data_source_controller.EditDataSourceUsingPUTHandler")
	}

	if o.SchemaControllerEditEntityUsingPUTHandler == nil {
		unregistered = append(unregistered, "schema_controller.EditEntityUsingPUTHandler")
	}

	if o.SchemaControllerEditFieldUsingPUTHandler == nil {
		unregistered = append(unregistered, "schema_controller.EditFieldUsingPUTHandler")
	}

	if o.UserControllerEditFieldUsingPUT1Handler == nil {
		unregistered = append(unregistered, "user_controller.EditFieldUsingPUT1Handler")
	}

	if o.PermissionControllerEditPermissionUsingPUTHandler == nil {
		unregistered = append(unregistered, "permission_controller.EditPermissionUsingPUTHandler")
	}

	if o.RoleControllerEditRoleUsingPUTHandler == nil {
		unregistered = append(unregistered, "role_controller.EditRoleUsingPUTHandler")
	}

	if o.SchemaControllerFindAllFieldsUsingGETHandler == nil {
		unregistered = append(unregistered, "schema_controller.FindAllFieldsUsingGETHandler")
	}

	if o.SchemaControllerFindEntityFieldsUsingGETHandler == nil {
		unregistered = append(unregistered, "schema_controller.FindEntityFieldsUsingGETHandler")
	}

	if o.SchemaControllerFindOneFieldUsingGETHandler == nil {
		unregistered = append(unregistered, "schema_controller.FindOneFieldUsingGETHandler")
	}

	if o.DataControllerFindOneUsingGETHandler == nil {
		unregistered = append(unregistered, "data_controller.FindOneUsingGETHandler")
	}

	if o.SchemaControllerFindOneUsingGET1Handler == nil {
		unregistered = append(unregistered, "schema_controller.FindOneUsingGET1Handler")
	}

	if o.DataSourceControllerFindRoleUsingGETHandler == nil {
		unregistered = append(unregistered, "data_source_controller.FindRoleUsingGETHandler")
	}

	if o.RoleControllerFindRoleUsingGET1Handler == nil {
		unregistered = append(unregistered, "role_controller.FindRoleUsingGET1Handler")
	}

	if o.PermissionControllerFindUserUsingGETHandler == nil {
		unregistered = append(unregistered, "permission_controller.FindUserUsingGETHandler")
	}

	if o.UserControllerFindUserUsingGET1Handler == nil {
		unregistered = append(unregistered, "user_controller.FindUserUsingGET1Handler")
	}

	if o.UserControllerGetAuthenticatedUserUsingGETHandler == nil {
		unregistered = append(unregistered, "user_controller.GetAuthenticatedUserUsingGETHandler")
	}

	if o.SchemaControllerGetSchemasUsingGETHandler == nil {
		unregistered = append(unregistered, "schema_controller.GetSchemasUsingGETHandler")
	}

	if o.DataSourceControllerListUsingGETHandler == nil {
		unregistered = append(unregistered, "data_source_controller.ListUsingGETHandler")
	}

	if o.PermissionControllerListUsingGET1Handler == nil {
		unregistered = append(unregistered, "permission_controller.ListUsingGET1Handler")
	}

	if o.RoleControllerListUsingGET2Handler == nil {
		unregistered = append(unregistered, "role_controller.ListUsingGET2Handler")
	}

	if o.UserControllerListUsingGET3Handler == nil {
		unregistered = append(unregistered, "user_controller.ListUsingGET3Handler")
	}

	if o.AuthenticationRestControllerRefreshAndGetAuthenticationTokenUsingGETHandler == nil {
		unregistered = append(unregistered, "authentication_rest_controller.RefreshAndGetAuthenticationTokenUsingGETHandler")
	}

	if o.SchemaControllerResetCurrentDsUsingPUTHandler == nil {
		unregistered = append(unregistered, "schema_controller.ResetCurrentDsUsingPUTHandler")
	}

	if o.SchemaControllerSyncSchemasUsingPUTHandler == nil {
		unregistered = append(unregistered, "schema_controller.SyncSchemasUsingPUTHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *EasyAdminAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *EasyAdminAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	return nil

}

// Authorizer returns the registered authorizer
func (o *EasyAdminAPI) Authorizer() runtime.Authorizer {

	return nil

}

// ConsumersFor gets the consumers for the specified media types
func (o *EasyAdminAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *EasyAdminAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *EasyAdminAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the easy admin API
func (o *EasyAdminAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *EasyAdminAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/datasource/_datasource"] = data_source_controller.NewAddDataSourceUsingPOST(o.context, o.DataSourceControllerAddDataSourceUsingPOSTHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/schemas/_entitys"] = schema_controller.NewAddEntityUsingPOST(o.context, o.SchemaControllerAddEntityUsingPOSTHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/schemas/_fields"] = schema_controller.NewAddFieldUsingPOST(o.context, o.SchemaControllerAddFieldUsingPOSTHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/permission/_permission"] = permission_controller.NewAddPermissionUsingPOST(o.context, o.PermissionControllerAddPermissionUsingPOSTHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/role/_roles"] = role_controller.NewAddRoleUsingPOST(o.context, o.RoleControllerAddRoleUsingPOSTHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/user/_users"] = user_controller.NewAddUserUsingPOST(o.context, o.UserControllerAddUserUsingPOSTHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apply"] = apply_controller.NewApplyUsingPOST(o.context, o.ApplyControllerApplyUsingPOSTHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/auth"] = authentication_rest_controller.NewCreateAuthenticationTokenUsingPOST(o.context, o.AuthenticationRestControllerCreateAuthenticationTokenUsingPOSTHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/api/{entity}/{id}"] = data_controller.NewDataMutationUsingDELETE(o.context, o.DataControllerDataMutationUsingDELETEHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/{entity}"] = data_controller.NewDataMutationUsingPOST(o.context, o.DataControllerDataMutationUsingPOSTHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/api/{entity}/{id}"] = data_controller.NewDataMutationUsingPUT(o.context, o.DataControllerDataMutationUsingPUTHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/{entity}"] = data_controller.NewDataQueryUsingGET(o.context, o.DataControllerDataQueryUsingGETHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/datasource/_datasource/put/{id}"] = data_source_controller.NewEditDataSourceUsingPUT(o.context, o.DataSourceControllerEditDataSourceUsingPUTHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/schemas/_entitys/put/{id}"] = schema_controller.NewEditEntityUsingPUT(o.context, o.SchemaControllerEditEntityUsingPUTHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/schemas/_fields/put/{id}"] = schema_controller.NewEditFieldUsingPUT(o.context, o.SchemaControllerEditFieldUsingPUTHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/user/_users/put/{id}"] = user_controller.NewEditFieldUsingPUT1(o.context, o.UserControllerEditFieldUsingPUT1Handler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/permission/_permission/{id}"] = permission_controller.NewEditPermissionUsingPUT(o.context, o.PermissionControllerEditPermissionUsingPUTHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/role/_roles/put/{id}"] = role_controller.NewEditRoleUsingPUT(o.context, o.RoleControllerEditRoleUsingPUTHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/schemas/_fields"] = schema_controller.NewFindAllFieldsUsingGET(o.context, o.SchemaControllerFindAllFieldsUsingGETHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/schemas/fields"] = schema_controller.NewFindEntityFieldsUsingGET(o.context, o.SchemaControllerFindEntityFieldsUsingGETHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/schemas/_fields/{fid}"] = schema_controller.NewFindOneFieldUsingGET(o.context, o.SchemaControllerFindOneFieldUsingGETHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/{entity}/{id}"] = data_controller.NewFindOneUsingGET(o.context, o.DataControllerFindOneUsingGETHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/schemas/_entitys/{eid}"] = schema_controller.NewFindOneUsingGET1(o.context, o.SchemaControllerFindOneUsingGET1Handler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/datasource/_datasource/{datasourceId}"] = data_source_controller.NewFindRoleUsingGET(o.context, o.DataSourceControllerFindRoleUsingGETHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/role/_roles/{roleId}"] = role_controller.NewFindRoleUsingGET1(o.context, o.RoleControllerFindRoleUsingGET1Handler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/permission/_permission/{id}"] = permission_controller.NewFindUserUsingGET(o.context, o.PermissionControllerFindUserUsingGETHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user/_users/{userId}"] = user_controller.NewFindUserUsingGET1(o.context, o.UserControllerFindUserUsingGET1Handler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user/me"] = user_controller.NewGetAuthenticatedUserUsingGET(o.context, o.UserControllerGetAuthenticatedUserUsingGETHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/schemas/_entitys"] = schema_controller.NewGetSchemasUsingGET(o.context, o.SchemaControllerGetSchemasUsingGETHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/datasource/_datasource"] = data_source_controller.NewListUsingGET(o.context, o.DataSourceControllerListUsingGETHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/permission/_permission"] = permission_controller.NewListUsingGET1(o.context, o.PermissionControllerListUsingGET1Handler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/role/_roles"] = role_controller.NewListUsingGET2(o.context, o.RoleControllerListUsingGET2Handler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user/_users"] = user_controller.NewListUsingGET3(o.context, o.UserControllerListUsingGET3Handler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/refresh"] = authentication_rest_controller.NewRefreshAndGetAuthenticationTokenUsingGET(o.context, o.AuthenticationRestControllerRefreshAndGetAuthenticationTokenUsingGETHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/schemas/resetCurrentDs/{dataSourceId}"] = schema_controller.NewResetCurrentDsUsingPUT(o.context, o.SchemaControllerResetCurrentDsUsingPUTHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/schemas/sync/{dataSourceId}"] = schema_controller.NewSyncSchemasUsingPUT(o.context, o.SchemaControllerSyncSchemasUsingPUTHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *EasyAdminAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middelware as you see fit
func (o *EasyAdminAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}
