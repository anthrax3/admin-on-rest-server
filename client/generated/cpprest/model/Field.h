/**
 * DataHive RESTful APIs
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * Field.h
 *
 * 
 */

#ifndef Field_H_
#define Field_H_


#include "ModelBase.h"

#include "IChoiceItem.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  Field
    : public ModelBase
{
public:
    Field();
    virtual ~Field();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Field members

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<IChoiceItem>>& getChoices();
    bool choicesIsSet() const;
    void unsetChoices();
    void setChoices(std::vector<std::shared_ptr<IChoiceItem>> value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getComponent() const;
    bool componentIsSet() const;
    void unsetComponent();
    void setComponent(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDataSourceId() const;
    bool dataSourceIdIsSet() const;
    void unsetDataSourceId();
    void setDataSourceId(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDefaultValue() const;
    bool defaultValueIsSet() const;
    void unsetDefaultValue();
    void setDefaultValue(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getEid() const;
    bool eidIsSet() const;
    void unsetEid();
    void setEid(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();
    void setId(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getInputType() const;
    bool inputTypeIsSet() const;
    void unsetInputType();
    void setInputType(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    bool getIsAutoIncremented() const;
    bool isAutoIncrementedIsSet() const;
    void unsetIsAutoIncremented();
    void setIsAutoIncremented(bool value);
    /// <summary>
    /// 
    /// </summary>
    bool getIsPartOfPrimaryKey() const;
    bool isPartOfPrimaryKeyIsSet() const;
    void unsetIsPartOfPrimaryKey();
    void setIsPartOfPrimaryKey(bool value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLabel() const;
    bool labelIsSet() const;
    void unsetLabel();
    void setLabel(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    int32_t getMaxLength() const;
    bool maxLengthIsSet() const;
    void unsetMaxLength();
    void setMaxLength(int32_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getMaxValue() const;
    bool maxValueIsSet() const;
    void unsetMaxValue();
    void setMaxValue(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getMinValue() const;
    bool minValueIsSet() const;
    void unsetMinValue();
    void setMinValue(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();
    void setName(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getReference() const;
    bool referenceIsSet() const;
    void unsetReference();
    void setReference(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getReferenceOptionText() const;
    bool referenceOptionTextIsSet() const;
    void unsetReferenceOptionText();
    void setReferenceOptionText(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    bool getRequired() const;
    bool requiredIsSet() const;
    void unsetRequired();
    void setRequired(bool value);
    /// <summary>
    /// 
    /// </summary>
    bool getShowInCreate() const;
    bool showInCreateIsSet() const;
    void unsetShowInCreate();
    void setShowInCreate(bool value);
    /// <summary>
    /// 
    /// </summary>
    bool getShowInEdit() const;
    bool showInEditIsSet() const;
    void unsetShowInEdit();
    void setShowInEdit(bool value);
    /// <summary>
    /// 
    /// </summary>
    bool getShowInFilter() const;
    bool showInFilterIsSet() const;
    void unsetShowInFilter();
    void setShowInFilter(bool value);
    /// <summary>
    /// 
    /// </summary>
    bool getShowInList() const;
    bool showInListIsSet() const;
    void unsetShowInList();
    void setShowInList(bool value);
    /// <summary>
    /// 
    /// </summary>
    bool getShowInShow() const;
    bool showInShowIsSet() const;
    void unsetShowInShow();
    void setShowInShow(bool value);

protected:
    std::vector<std::shared_ptr<IChoiceItem>> m_Choices;
    bool m_ChoicesIsSet;
    utility::string_t m_Component;
    bool m_ComponentIsSet;
    utility::string_t m_DataSourceId;
    bool m_DataSourceIdIsSet;
    utility::string_t m_DefaultValue;
    bool m_DefaultValueIsSet;
    utility::string_t m_Eid;
    bool m_EidIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_InputType;
    bool m_InputTypeIsSet;
    bool m_IsAutoIncremented;
    bool m_IsAutoIncrementedIsSet;
    bool m_IsPartOfPrimaryKey;
    bool m_IsPartOfPrimaryKeyIsSet;
    utility::string_t m_Label;
    bool m_LabelIsSet;
    int32_t m_MaxLength;
    bool m_MaxLengthIsSet;
    utility::string_t m_MaxValue;
    bool m_MaxValueIsSet;
    utility::string_t m_MinValue;
    bool m_MinValueIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Reference;
    bool m_ReferenceIsSet;
    utility::string_t m_ReferenceOptionText;
    bool m_ReferenceOptionTextIsSet;
    bool m_Required;
    bool m_RequiredIsSet;
    bool m_ShowInCreate;
    bool m_ShowInCreateIsSet;
    bool m_ShowInEdit;
    bool m_ShowInEditIsSet;
    bool m_ShowInFilter;
    bool m_ShowInFilterIsSet;
    bool m_ShowInList;
    bool m_ShowInListIsSet;
    bool m_ShowInShow;
    bool m_ShowInShowIsSet;
};

}
}
}
}

#endif /* Field_H_ */
