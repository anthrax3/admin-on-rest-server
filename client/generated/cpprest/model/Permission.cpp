/**
 * DataHive RESTful APIs
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Permission.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Permission::Permission()
{
    m_c = false;
    m_cIsSet = false;
    m_d = false;
    m_dIsSet = false;
    m_Eid = U("");
    m_EidIsSet = false;
    m_Id = U("");
    m_IdIsSet = false;
    m_r = false;
    m_rIsSet = false;
    m_RoleId = U("");
    m_RoleIdIsSet = false;
    m_u = false;
    m_uIsSet = false;
}

Permission::~Permission()
{
}

void Permission::validate()
{
    // TODO: implement validation
}

web::json::value Permission::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_cIsSet)
    {
        val[U("c")] = ModelBase::toJson(m_c);
    }
    if(m_dIsSet)
    {
        val[U("d")] = ModelBase::toJson(m_d);
    }
    if(m_EidIsSet)
    {
        val[U("eid")] = ModelBase::toJson(m_Eid);
    }
    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    if(m_rIsSet)
    {
        val[U("r")] = ModelBase::toJson(m_r);
    }
    if(m_RoleIdIsSet)
    {
        val[U("roleId")] = ModelBase::toJson(m_RoleId);
    }
    if(m_uIsSet)
    {
        val[U("u")] = ModelBase::toJson(m_u);
    }

    return val;
}

void Permission::fromJson(web::json::value& val)
{
    if(val.has_field(U("c")))
    {
        setC(ModelBase::boolFromJson(val[U("c")]));
    }
    if(val.has_field(U("d")))
    {
        setD(ModelBase::boolFromJson(val[U("d")]));
    }
    if(val.has_field(U("eid")))
    {
        setEid(ModelBase::stringFromJson(val[U("eid")]));
    }
    if(val.has_field(U("id")))
    {
        setId(ModelBase::stringFromJson(val[U("id")]));
    }
    if(val.has_field(U("r")))
    {
        setR(ModelBase::boolFromJson(val[U("r")]));
    }
    if(val.has_field(U("roleId")))
    {
        setRoleId(ModelBase::stringFromJson(val[U("roleId")]));
    }
    if(val.has_field(U("u")))
    {
        setU(ModelBase::boolFromJson(val[U("u")]));
    }
}

void Permission::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_cIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("c"), m_c));
    }
    if(m_dIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("d"), m_d));
    }
    if(m_EidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("eid"), m_Eid));
        
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
        
    }
    if(m_rIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("r"), m_r));
    }
    if(m_RoleIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("roleId"), m_RoleId));
        
    }
    if(m_uIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("u"), m_u));
    }
}

void Permission::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("c")))
    {
        setC(ModelBase::boolFromHttpContent(multipart->getContent(U("c"))));
    }
    if(multipart->hasContent(U("d")))
    {
        setD(ModelBase::boolFromHttpContent(multipart->getContent(U("d"))));
    }
    if(multipart->hasContent(U("eid")))
    {
        setEid(ModelBase::stringFromHttpContent(multipart->getContent(U("eid"))));
    }
    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::stringFromHttpContent(multipart->getContent(U("id"))));
    }
    if(multipart->hasContent(U("r")))
    {
        setR(ModelBase::boolFromHttpContent(multipart->getContent(U("r"))));
    }
    if(multipart->hasContent(U("roleId")))
    {
        setRoleId(ModelBase::stringFromHttpContent(multipart->getContent(U("roleId"))));
    }
    if(multipart->hasContent(U("u")))
    {
        setU(ModelBase::boolFromHttpContent(multipart->getContent(U("u"))));
    }
}

bool Permission::getC() const
{
    return m_c;
}


void Permission::setC(bool value)
{
    m_c = value;
    m_cIsSet = true;
}
bool Permission::CIsSet() const
{
    return m_cIsSet;
}

void Permission::unsetc()
{
    m_cIsSet = false;
}

bool Permission::getD() const
{
    return m_d;
}


void Permission::setD(bool value)
{
    m_d = value;
    m_dIsSet = true;
}
bool Permission::DIsSet() const
{
    return m_dIsSet;
}

void Permission::unsetd()
{
    m_dIsSet = false;
}

utility::string_t Permission::getEid() const
{
    return m_Eid;
}


void Permission::setEid(utility::string_t value)
{
    m_Eid = value;
    m_EidIsSet = true;
}
bool Permission::eidIsSet() const
{
    return m_EidIsSet;
}

void Permission::unsetEid()
{
    m_EidIsSet = false;
}

utility::string_t Permission::getId() const
{
    return m_Id;
}


void Permission::setId(utility::string_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool Permission::idIsSet() const
{
    return m_IdIsSet;
}

void Permission::unsetId()
{
    m_IdIsSet = false;
}

bool Permission::getR() const
{
    return m_r;
}


void Permission::setR(bool value)
{
    m_r = value;
    m_rIsSet = true;
}
bool Permission::RIsSet() const
{
    return m_rIsSet;
}

void Permission::unsetr()
{
    m_rIsSet = false;
}

utility::string_t Permission::getRoleId() const
{
    return m_RoleId;
}


void Permission::setRoleId(utility::string_t value)
{
    m_RoleId = value;
    m_RoleIdIsSet = true;
}
bool Permission::roleIdIsSet() const
{
    return m_RoleIdIsSet;
}

void Permission::unsetRoleId()
{
    m_RoleIdIsSet = false;
}

bool Permission::getU() const
{
    return m_u;
}


void Permission::setU(bool value)
{
    m_u = value;
    m_uIsSet = true;
}
bool Permission::UIsSet() const
{
    return m_uIsSet;
}

void Permission::unsetu()
{
    m_uIsSet = false;
}

}
}
}
}

