/**
 * DataHive RESTful APIs
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "JwtAuthenticationRequest.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

JwtAuthenticationRequest::JwtAuthenticationRequest()
{
    m_Password = U("");
    m_PasswordIsSet = false;
    m_Username = U("");
    m_UsernameIsSet = false;
}

JwtAuthenticationRequest::~JwtAuthenticationRequest()
{
}

void JwtAuthenticationRequest::validate()
{
    // TODO: implement validation
}

web::json::value JwtAuthenticationRequest::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_PasswordIsSet)
    {
        val[U("password")] = ModelBase::toJson(m_Password);
    }
    if(m_UsernameIsSet)
    {
        val[U("username")] = ModelBase::toJson(m_Username);
    }

    return val;
}

void JwtAuthenticationRequest::fromJson(web::json::value& val)
{
    if(val.has_field(U("password")))
    {
        setPassword(ModelBase::stringFromJson(val[U("password")]));
    }
    if(val.has_field(U("username")))
    {
        setUsername(ModelBase::stringFromJson(val[U("username")]));
    }
}

void JwtAuthenticationRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_PasswordIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("password"), m_Password));
        
    }
    if(m_UsernameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("username"), m_Username));
        
    }
}

void JwtAuthenticationRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("password")))
    {
        setPassword(ModelBase::stringFromHttpContent(multipart->getContent(U("password"))));
    }
    if(multipart->hasContent(U("username")))
    {
        setUsername(ModelBase::stringFromHttpContent(multipart->getContent(U("username"))));
    }
}

utility::string_t JwtAuthenticationRequest::getPassword() const
{
    return m_Password;
}


void JwtAuthenticationRequest::setPassword(utility::string_t value)
{
    m_Password = value;
    m_PasswordIsSet = true;
}
bool JwtAuthenticationRequest::passwordIsSet() const
{
    return m_PasswordIsSet;
}

void JwtAuthenticationRequest::unsetPassword()
{
    m_PasswordIsSet = false;
}

utility::string_t JwtAuthenticationRequest::getUsername() const
{
    return m_Username;
}


void JwtAuthenticationRequest::setUsername(utility::string_t value)
{
    m_Username = value;
    m_UsernameIsSet = true;
}
bool JwtAuthenticationRequest::usernameIsSet() const
{
    return m_UsernameIsSet;
}

void JwtAuthenticationRequest::unsetUsername()
{
    m_UsernameIsSet = false;
}

}
}
}
}

