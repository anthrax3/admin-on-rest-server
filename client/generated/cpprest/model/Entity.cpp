/**
 * DataHive RESTful APIs
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Entity.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Entity::Entity()
{
    m_CrudIsSet = false;
    m_FieldsIsSet = false;
    m_Id = U("");
    m_IdIsSet = false;
    m_Label = U("");
    m_LabelIsSet = false;
    m_Name = U("");
    m_NameIsSet = false;
    m_Redirect = U("");
    m_RedirectIsSet = false;
    m_ShowInMenu = false;
    m_ShowInMenuIsSet = false;
}

Entity::~Entity()
{
}

void Entity::validate()
{
    // TODO: implement validation
}

web::json::value Entity::toJson() const
{
    web::json::value val = web::json::value::object();

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Crud )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[U("crud")] = web::json::value::array(jsonArray);
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Fields )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[U("fields")] = web::json::value::array(jsonArray);
        }
    }
    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    if(m_LabelIsSet)
    {
        val[U("label")] = ModelBase::toJson(m_Label);
    }
    if(m_NameIsSet)
    {
        val[U("name")] = ModelBase::toJson(m_Name);
    }
    if(m_RedirectIsSet)
    {
        val[U("redirect")] = ModelBase::toJson(m_Redirect);
    }
    if(m_ShowInMenuIsSet)
    {
        val[U("showInMenu")] = ModelBase::toJson(m_ShowInMenu);
    }

    return val;
}

void Entity::fromJson(web::json::value& val)
{
    {
        m_Crud.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("crud")))
        {
        for( auto& item : val[U("crud")].as_array() )
        {
            m_Crud.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    {
        m_Fields.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("fields")))
        {
        for( auto& item : val[U("fields")].as_array() )
        {
            if(item.is_null())
            {
                m_Fields.push_back( std::shared_ptr<Field>(nullptr) );
            }
            else
            {
                std::shared_ptr<Field> newItem(new Field());
                newItem->fromJson(item);
                m_Fields.push_back( newItem );
            }
        }
        }
    }
    if(val.has_field(U("id")))
    {
        setId(ModelBase::stringFromJson(val[U("id")]));
    }
    if(val.has_field(U("label")))
    {
        setLabel(ModelBase::stringFromJson(val[U("label")]));
    }
    if(val.has_field(U("name")))
    {
        setName(ModelBase::stringFromJson(val[U("name")]));
    }
    if(val.has_field(U("redirect")))
    {
        setRedirect(ModelBase::stringFromJson(val[U("redirect")]));
    }
    if(val.has_field(U("showInMenu")))
    {
        setShowInMenu(ModelBase::boolFromJson(val[U("showInMenu")]));
    }
}

void Entity::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Crud )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("crud"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Fields )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("fields"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
        
    }
    if(m_LabelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("label"), m_Label));
        
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
        
    }
    if(m_RedirectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("redirect"), m_Redirect));
        
    }
    if(m_ShowInMenuIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("showInMenu"), m_ShowInMenu));
    }
}

void Entity::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    {
        m_Crud.clear();
        if(multipart->hasContent(U("crud")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("crud"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Crud.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    {
        m_Fields.clear();
        if(multipart->hasContent(U("fields")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("fields"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Fields.push_back( std::shared_ptr<Field>(nullptr) );
            }
            else
            {
                std::shared_ptr<Field> newItem(new Field());
                newItem->fromJson(item);
                m_Fields.push_back( newItem );
            }
        }
        }
    }
    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::stringFromHttpContent(multipart->getContent(U("id"))));
    }
    if(multipart->hasContent(U("label")))
    {
        setLabel(ModelBase::stringFromHttpContent(multipart->getContent(U("label"))));
    }
    if(multipart->hasContent(U("name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
    }
    if(multipart->hasContent(U("redirect")))
    {
        setRedirect(ModelBase::stringFromHttpContent(multipart->getContent(U("redirect"))));
    }
    if(multipart->hasContent(U("showInMenu")))
    {
        setShowInMenu(ModelBase::boolFromHttpContent(multipart->getContent(U("showInMenu"))));
    }
}

std::vector<utility::string_t>& Entity::getCrud()
{
    return m_Crud;
}

void Entity::setCrud(std::vector<utility::string_t> value)
{
    m_Crud = value;
    m_CrudIsSet = true;
}
bool Entity::crudIsSet() const
{
    return m_CrudIsSet;
}

void Entity::unsetCrud()
{
    m_CrudIsSet = false;
}

std::vector<std::shared_ptr<Field>>& Entity::getFields()
{
    return m_Fields;
}

void Entity::setFields(std::vector<std::shared_ptr<Field>> value)
{
    m_Fields = value;
    m_FieldsIsSet = true;
}
bool Entity::fieldsIsSet() const
{
    return m_FieldsIsSet;
}

void Entity::unsetFields()
{
    m_FieldsIsSet = false;
}

utility::string_t Entity::getId() const
{
    return m_Id;
}


void Entity::setId(utility::string_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool Entity::idIsSet() const
{
    return m_IdIsSet;
}

void Entity::unsetId()
{
    m_IdIsSet = false;
}

utility::string_t Entity::getLabel() const
{
    return m_Label;
}


void Entity::setLabel(utility::string_t value)
{
    m_Label = value;
    m_LabelIsSet = true;
}
bool Entity::labelIsSet() const
{
    return m_LabelIsSet;
}

void Entity::unsetLabel()
{
    m_LabelIsSet = false;
}

utility::string_t Entity::getName() const
{
    return m_Name;
}


void Entity::setName(utility::string_t value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool Entity::nameIsSet() const
{
    return m_NameIsSet;
}

void Entity::unsetName()
{
    m_NameIsSet = false;
}

utility::string_t Entity::getRedirect() const
{
    return m_Redirect;
}


void Entity::setRedirect(utility::string_t value)
{
    m_Redirect = value;
    m_RedirectIsSet = true;
}
bool Entity::redirectIsSet() const
{
    return m_RedirectIsSet;
}

void Entity::unsetRedirect()
{
    m_RedirectIsSet = false;
}

bool Entity::getShowInMenu() const
{
    return m_ShowInMenu;
}


void Entity::setShowInMenu(bool value)
{
    m_ShowInMenu = value;
    m_ShowInMenuIsSet = true;
}
bool Entity::showInMenuIsSet() const
{
    return m_ShowInMenuIsSet;
}

void Entity::unsetShowInMenu()
{
    m_ShowInMenuIsSet = false;
}

}
}
}
}

