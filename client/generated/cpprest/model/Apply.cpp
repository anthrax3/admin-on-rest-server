/**
 * DataHive RESTful APIs
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Apply.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Apply::Apply()
{
    m_Email = U("");
    m_EmailIsSet = false;
    m_Mobile = U("");
    m_MobileIsSet = false;
    m_Password = U("");
    m_PasswordIsSet = false;
    m_Username = U("");
    m_UsernameIsSet = false;
}

Apply::~Apply()
{
}

void Apply::validate()
{
    // TODO: implement validation
}

web::json::value Apply::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_EmailIsSet)
    {
        val[U("email")] = ModelBase::toJson(m_Email);
    }
    if(m_MobileIsSet)
    {
        val[U("mobile")] = ModelBase::toJson(m_Mobile);
    }
    if(m_PasswordIsSet)
    {
        val[U("password")] = ModelBase::toJson(m_Password);
    }
    if(m_UsernameIsSet)
    {
        val[U("username")] = ModelBase::toJson(m_Username);
    }

    return val;
}

void Apply::fromJson(web::json::value& val)
{
    if(val.has_field(U("email")))
    {
        setEmail(ModelBase::stringFromJson(val[U("email")]));
    }
    if(val.has_field(U("mobile")))
    {
        setMobile(ModelBase::stringFromJson(val[U("mobile")]));
    }
    if(val.has_field(U("password")))
    {
        setPassword(ModelBase::stringFromJson(val[U("password")]));
    }
    if(val.has_field(U("username")))
    {
        setUsername(ModelBase::stringFromJson(val[U("username")]));
    }
}

void Apply::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_EmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("email"), m_Email));
        
    }
    if(m_MobileIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("mobile"), m_Mobile));
        
    }
    if(m_PasswordIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("password"), m_Password));
        
    }
    if(m_UsernameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("username"), m_Username));
        
    }
}

void Apply::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("email")))
    {
        setEmail(ModelBase::stringFromHttpContent(multipart->getContent(U("email"))));
    }
    if(multipart->hasContent(U("mobile")))
    {
        setMobile(ModelBase::stringFromHttpContent(multipart->getContent(U("mobile"))));
    }
    if(multipart->hasContent(U("password")))
    {
        setPassword(ModelBase::stringFromHttpContent(multipart->getContent(U("password"))));
    }
    if(multipart->hasContent(U("username")))
    {
        setUsername(ModelBase::stringFromHttpContent(multipart->getContent(U("username"))));
    }
}

utility::string_t Apply::getEmail() const
{
    return m_Email;
}


void Apply::setEmail(utility::string_t value)
{
    m_Email = value;
    m_EmailIsSet = true;
}
bool Apply::emailIsSet() const
{
    return m_EmailIsSet;
}

void Apply::unsetEmail()
{
    m_EmailIsSet = false;
}

utility::string_t Apply::getMobile() const
{
    return m_Mobile;
}


void Apply::setMobile(utility::string_t value)
{
    m_Mobile = value;
    m_MobileIsSet = true;
}
bool Apply::mobileIsSet() const
{
    return m_MobileIsSet;
}

void Apply::unsetMobile()
{
    m_MobileIsSet = false;
}

utility::string_t Apply::getPassword() const
{
    return m_Password;
}


void Apply::setPassword(utility::string_t value)
{
    m_Password = value;
    m_PasswordIsSet = true;
}
bool Apply::passwordIsSet() const
{
    return m_PasswordIsSet;
}

void Apply::unsetPassword()
{
    m_PasswordIsSet = false;
}

utility::string_t Apply::getUsername() const
{
    return m_Username;
}


void Apply::setUsername(utility::string_t value)
{
    m_Username = value;
    m_UsernameIsSet = true;
}
bool Apply::usernameIsSet() const
{
    return m_UsernameIsSet;
}

void Apply::unsetUsername()
{
    m_UsernameIsSet = false;
}

}
}
}
}

