/**
 * DataHive RESTful APIs
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Field.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Field::Field()
{
    m_ChoicesIsSet = false;
    m_Component = U("");
    m_ComponentIsSet = false;
    m_DataSourceId = U("");
    m_DataSourceIdIsSet = false;
    m_DefaultValue = U("");
    m_DefaultValueIsSet = false;
    m_Eid = U("");
    m_EidIsSet = false;
    m_Id = U("");
    m_IdIsSet = false;
    m_InputType = U("");
    m_InputTypeIsSet = false;
    m_IsAutoIncremented = false;
    m_IsAutoIncrementedIsSet = false;
    m_IsPartOfPrimaryKey = false;
    m_IsPartOfPrimaryKeyIsSet = false;
    m_Label = U("");
    m_LabelIsSet = false;
    m_MaxLength = 0;
    m_MaxLengthIsSet = false;
    m_MaxValue = U("");
    m_MaxValueIsSet = false;
    m_MinValue = U("");
    m_MinValueIsSet = false;
    m_Name = U("");
    m_NameIsSet = false;
    m_Reference = U("");
    m_ReferenceIsSet = false;
    m_ReferenceOptionText = U("");
    m_ReferenceOptionTextIsSet = false;
    m_Required = false;
    m_RequiredIsSet = false;
    m_ShowInCreate = false;
    m_ShowInCreateIsSet = false;
    m_ShowInEdit = false;
    m_ShowInEditIsSet = false;
    m_ShowInFilter = false;
    m_ShowInFilterIsSet = false;
    m_ShowInList = false;
    m_ShowInListIsSet = false;
    m_ShowInShow = false;
    m_ShowInShowIsSet = false;
}

Field::~Field()
{
}

void Field::validate()
{
    // TODO: implement validation
}

web::json::value Field::toJson() const
{
    web::json::value val = web::json::value::object();

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Choices )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[U("choices")] = web::json::value::array(jsonArray);
        }
    }
    if(m_ComponentIsSet)
    {
        val[U("component")] = ModelBase::toJson(m_Component);
    }
    if(m_DataSourceIdIsSet)
    {
        val[U("dataSourceId")] = ModelBase::toJson(m_DataSourceId);
    }
    if(m_DefaultValueIsSet)
    {
        val[U("defaultValue")] = ModelBase::toJson(m_DefaultValue);
    }
    if(m_EidIsSet)
    {
        val[U("eid")] = ModelBase::toJson(m_Eid);
    }
    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    if(m_InputTypeIsSet)
    {
        val[U("inputType")] = ModelBase::toJson(m_InputType);
    }
    if(m_IsAutoIncrementedIsSet)
    {
        val[U("isAutoIncremented")] = ModelBase::toJson(m_IsAutoIncremented);
    }
    if(m_IsPartOfPrimaryKeyIsSet)
    {
        val[U("isPartOfPrimaryKey")] = ModelBase::toJson(m_IsPartOfPrimaryKey);
    }
    if(m_LabelIsSet)
    {
        val[U("label")] = ModelBase::toJson(m_Label);
    }
    if(m_MaxLengthIsSet)
    {
        val[U("maxLength")] = ModelBase::toJson(m_MaxLength);
    }
    if(m_MaxValueIsSet)
    {
        val[U("maxValue")] = ModelBase::toJson(m_MaxValue);
    }
    if(m_MinValueIsSet)
    {
        val[U("minValue")] = ModelBase::toJson(m_MinValue);
    }
    if(m_NameIsSet)
    {
        val[U("name")] = ModelBase::toJson(m_Name);
    }
    if(m_ReferenceIsSet)
    {
        val[U("reference")] = ModelBase::toJson(m_Reference);
    }
    if(m_ReferenceOptionTextIsSet)
    {
        val[U("referenceOptionText")] = ModelBase::toJson(m_ReferenceOptionText);
    }
    if(m_RequiredIsSet)
    {
        val[U("required")] = ModelBase::toJson(m_Required);
    }
    if(m_ShowInCreateIsSet)
    {
        val[U("showInCreate")] = ModelBase::toJson(m_ShowInCreate);
    }
    if(m_ShowInEditIsSet)
    {
        val[U("showInEdit")] = ModelBase::toJson(m_ShowInEdit);
    }
    if(m_ShowInFilterIsSet)
    {
        val[U("showInFilter")] = ModelBase::toJson(m_ShowInFilter);
    }
    if(m_ShowInListIsSet)
    {
        val[U("showInList")] = ModelBase::toJson(m_ShowInList);
    }
    if(m_ShowInShowIsSet)
    {
        val[U("showInShow")] = ModelBase::toJson(m_ShowInShow);
    }

    return val;
}

void Field::fromJson(web::json::value& val)
{
    {
        m_Choices.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("choices")))
        {
        for( auto& item : val[U("choices")].as_array() )
        {
            if(item.is_null())
            {
                m_Choices.push_back( std::shared_ptr<IChoiceItem>(nullptr) );
            }
            else
            {
                std::shared_ptr<IChoiceItem> newItem(new IChoiceItem());
                newItem->fromJson(item);
                m_Choices.push_back( newItem );
            }
        }
        }
    }
    if(val.has_field(U("component")))
    {
        setComponent(ModelBase::stringFromJson(val[U("component")]));
    }
    if(val.has_field(U("dataSourceId")))
    {
        setDataSourceId(ModelBase::stringFromJson(val[U("dataSourceId")]));
    }
    if(val.has_field(U("defaultValue")))
    {
        setDefaultValue(ModelBase::stringFromJson(val[U("defaultValue")]));
    }
    if(val.has_field(U("eid")))
    {
        setEid(ModelBase::stringFromJson(val[U("eid")]));
    }
    if(val.has_field(U("id")))
    {
        setId(ModelBase::stringFromJson(val[U("id")]));
    }
    if(val.has_field(U("inputType")))
    {
        setInputType(ModelBase::stringFromJson(val[U("inputType")]));
    }
    if(val.has_field(U("isAutoIncremented")))
    {
        setIsAutoIncremented(ModelBase::boolFromJson(val[U("isAutoIncremented")]));
    }
    if(val.has_field(U("isPartOfPrimaryKey")))
    {
        setIsPartOfPrimaryKey(ModelBase::boolFromJson(val[U("isPartOfPrimaryKey")]));
    }
    if(val.has_field(U("label")))
    {
        setLabel(ModelBase::stringFromJson(val[U("label")]));
    }
    if(val.has_field(U("maxLength")))
    {
        setMaxLength(ModelBase::int32_tFromJson(val[U("maxLength")]));
    }
    if(val.has_field(U("maxValue")))
    {
        setMaxValue(ModelBase::stringFromJson(val[U("maxValue")]));
    }
    if(val.has_field(U("minValue")))
    {
        setMinValue(ModelBase::stringFromJson(val[U("minValue")]));
    }
    if(val.has_field(U("name")))
    {
        setName(ModelBase::stringFromJson(val[U("name")]));
    }
    if(val.has_field(U("reference")))
    {
        setReference(ModelBase::stringFromJson(val[U("reference")]));
    }
    if(val.has_field(U("referenceOptionText")))
    {
        setReferenceOptionText(ModelBase::stringFromJson(val[U("referenceOptionText")]));
    }
    if(val.has_field(U("required")))
    {
        setRequired(ModelBase::boolFromJson(val[U("required")]));
    }
    if(val.has_field(U("showInCreate")))
    {
        setShowInCreate(ModelBase::boolFromJson(val[U("showInCreate")]));
    }
    if(val.has_field(U("showInEdit")))
    {
        setShowInEdit(ModelBase::boolFromJson(val[U("showInEdit")]));
    }
    if(val.has_field(U("showInFilter")))
    {
        setShowInFilter(ModelBase::boolFromJson(val[U("showInFilter")]));
    }
    if(val.has_field(U("showInList")))
    {
        setShowInList(ModelBase::boolFromJson(val[U("showInList")]));
    }
    if(val.has_field(U("showInShow")))
    {
        setShowInShow(ModelBase::boolFromJson(val[U("showInShow")]));
    }
}

void Field::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Choices )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("choices"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_ComponentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("component"), m_Component));
        
    }
    if(m_DataSourceIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("dataSourceId"), m_DataSourceId));
        
    }
    if(m_DefaultValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("defaultValue"), m_DefaultValue));
        
    }
    if(m_EidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("eid"), m_Eid));
        
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
        
    }
    if(m_InputTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("inputType"), m_InputType));
        
    }
    if(m_IsAutoIncrementedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("isAutoIncremented"), m_IsAutoIncremented));
    }
    if(m_IsPartOfPrimaryKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("isPartOfPrimaryKey"), m_IsPartOfPrimaryKey));
    }
    if(m_LabelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("label"), m_Label));
        
    }
    if(m_MaxLengthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("maxLength"), m_MaxLength));
    }
    if(m_MaxValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("maxValue"), m_MaxValue));
        
    }
    if(m_MinValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("minValue"), m_MinValue));
        
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
        
    }
    if(m_ReferenceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("reference"), m_Reference));
        
    }
    if(m_ReferenceOptionTextIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("referenceOptionText"), m_ReferenceOptionText));
        
    }
    if(m_RequiredIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("required"), m_Required));
    }
    if(m_ShowInCreateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("showInCreate"), m_ShowInCreate));
    }
    if(m_ShowInEditIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("showInEdit"), m_ShowInEdit));
    }
    if(m_ShowInFilterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("showInFilter"), m_ShowInFilter));
    }
    if(m_ShowInListIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("showInList"), m_ShowInList));
    }
    if(m_ShowInShowIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("showInShow"), m_ShowInShow));
    }
}

void Field::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    {
        m_Choices.clear();
        if(multipart->hasContent(U("choices")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("choices"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Choices.push_back( std::shared_ptr<IChoiceItem>(nullptr) );
            }
            else
            {
                std::shared_ptr<IChoiceItem> newItem(new IChoiceItem());
                newItem->fromJson(item);
                m_Choices.push_back( newItem );
            }
        }
        }
    }
    if(multipart->hasContent(U("component")))
    {
        setComponent(ModelBase::stringFromHttpContent(multipart->getContent(U("component"))));
    }
    if(multipart->hasContent(U("dataSourceId")))
    {
        setDataSourceId(ModelBase::stringFromHttpContent(multipart->getContent(U("dataSourceId"))));
    }
    if(multipart->hasContent(U("defaultValue")))
    {
        setDefaultValue(ModelBase::stringFromHttpContent(multipart->getContent(U("defaultValue"))));
    }
    if(multipart->hasContent(U("eid")))
    {
        setEid(ModelBase::stringFromHttpContent(multipart->getContent(U("eid"))));
    }
    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::stringFromHttpContent(multipart->getContent(U("id"))));
    }
    if(multipart->hasContent(U("inputType")))
    {
        setInputType(ModelBase::stringFromHttpContent(multipart->getContent(U("inputType"))));
    }
    if(multipart->hasContent(U("isAutoIncremented")))
    {
        setIsAutoIncremented(ModelBase::boolFromHttpContent(multipart->getContent(U("isAutoIncremented"))));
    }
    if(multipart->hasContent(U("isPartOfPrimaryKey")))
    {
        setIsPartOfPrimaryKey(ModelBase::boolFromHttpContent(multipart->getContent(U("isPartOfPrimaryKey"))));
    }
    if(multipart->hasContent(U("label")))
    {
        setLabel(ModelBase::stringFromHttpContent(multipart->getContent(U("label"))));
    }
    if(multipart->hasContent(U("maxLength")))
    {
        setMaxLength(ModelBase::int32_tFromHttpContent(multipart->getContent(U("maxLength"))));
    }
    if(multipart->hasContent(U("maxValue")))
    {
        setMaxValue(ModelBase::stringFromHttpContent(multipart->getContent(U("maxValue"))));
    }
    if(multipart->hasContent(U("minValue")))
    {
        setMinValue(ModelBase::stringFromHttpContent(multipart->getContent(U("minValue"))));
    }
    if(multipart->hasContent(U("name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
    }
    if(multipart->hasContent(U("reference")))
    {
        setReference(ModelBase::stringFromHttpContent(multipart->getContent(U("reference"))));
    }
    if(multipart->hasContent(U("referenceOptionText")))
    {
        setReferenceOptionText(ModelBase::stringFromHttpContent(multipart->getContent(U("referenceOptionText"))));
    }
    if(multipart->hasContent(U("required")))
    {
        setRequired(ModelBase::boolFromHttpContent(multipart->getContent(U("required"))));
    }
    if(multipart->hasContent(U("showInCreate")))
    {
        setShowInCreate(ModelBase::boolFromHttpContent(multipart->getContent(U("showInCreate"))));
    }
    if(multipart->hasContent(U("showInEdit")))
    {
        setShowInEdit(ModelBase::boolFromHttpContent(multipart->getContent(U("showInEdit"))));
    }
    if(multipart->hasContent(U("showInFilter")))
    {
        setShowInFilter(ModelBase::boolFromHttpContent(multipart->getContent(U("showInFilter"))));
    }
    if(multipart->hasContent(U("showInList")))
    {
        setShowInList(ModelBase::boolFromHttpContent(multipart->getContent(U("showInList"))));
    }
    if(multipart->hasContent(U("showInShow")))
    {
        setShowInShow(ModelBase::boolFromHttpContent(multipart->getContent(U("showInShow"))));
    }
}

std::vector<std::shared_ptr<IChoiceItem>>& Field::getChoices()
{
    return m_Choices;
}

void Field::setChoices(std::vector<std::shared_ptr<IChoiceItem>> value)
{
    m_Choices = value;
    m_ChoicesIsSet = true;
}
bool Field::choicesIsSet() const
{
    return m_ChoicesIsSet;
}

void Field::unsetChoices()
{
    m_ChoicesIsSet = false;
}

utility::string_t Field::getComponent() const
{
    return m_Component;
}


void Field::setComponent(utility::string_t value)
{
    m_Component = value;
    m_ComponentIsSet = true;
}
bool Field::componentIsSet() const
{
    return m_ComponentIsSet;
}

void Field::unsetComponent()
{
    m_ComponentIsSet = false;
}

utility::string_t Field::getDataSourceId() const
{
    return m_DataSourceId;
}


void Field::setDataSourceId(utility::string_t value)
{
    m_DataSourceId = value;
    m_DataSourceIdIsSet = true;
}
bool Field::dataSourceIdIsSet() const
{
    return m_DataSourceIdIsSet;
}

void Field::unsetDataSourceId()
{
    m_DataSourceIdIsSet = false;
}

utility::string_t Field::getDefaultValue() const
{
    return m_DefaultValue;
}


void Field::setDefaultValue(utility::string_t value)
{
    m_DefaultValue = value;
    m_DefaultValueIsSet = true;
}
bool Field::defaultValueIsSet() const
{
    return m_DefaultValueIsSet;
}

void Field::unsetDefaultValue()
{
    m_DefaultValueIsSet = false;
}

utility::string_t Field::getEid() const
{
    return m_Eid;
}


void Field::setEid(utility::string_t value)
{
    m_Eid = value;
    m_EidIsSet = true;
}
bool Field::eidIsSet() const
{
    return m_EidIsSet;
}

void Field::unsetEid()
{
    m_EidIsSet = false;
}

utility::string_t Field::getId() const
{
    return m_Id;
}


void Field::setId(utility::string_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool Field::idIsSet() const
{
    return m_IdIsSet;
}

void Field::unsetId()
{
    m_IdIsSet = false;
}

utility::string_t Field::getInputType() const
{
    return m_InputType;
}


void Field::setInputType(utility::string_t value)
{
    m_InputType = value;
    m_InputTypeIsSet = true;
}
bool Field::inputTypeIsSet() const
{
    return m_InputTypeIsSet;
}

void Field::unsetInputType()
{
    m_InputTypeIsSet = false;
}

bool Field::getIsAutoIncremented() const
{
    return m_IsAutoIncremented;
}


void Field::setIsAutoIncremented(bool value)
{
    m_IsAutoIncremented = value;
    m_IsAutoIncrementedIsSet = true;
}
bool Field::isAutoIncrementedIsSet() const
{
    return m_IsAutoIncrementedIsSet;
}

void Field::unsetIsAutoIncremented()
{
    m_IsAutoIncrementedIsSet = false;
}

bool Field::getIsPartOfPrimaryKey() const
{
    return m_IsPartOfPrimaryKey;
}


void Field::setIsPartOfPrimaryKey(bool value)
{
    m_IsPartOfPrimaryKey = value;
    m_IsPartOfPrimaryKeyIsSet = true;
}
bool Field::isPartOfPrimaryKeyIsSet() const
{
    return m_IsPartOfPrimaryKeyIsSet;
}

void Field::unsetIsPartOfPrimaryKey()
{
    m_IsPartOfPrimaryKeyIsSet = false;
}

utility::string_t Field::getLabel() const
{
    return m_Label;
}


void Field::setLabel(utility::string_t value)
{
    m_Label = value;
    m_LabelIsSet = true;
}
bool Field::labelIsSet() const
{
    return m_LabelIsSet;
}

void Field::unsetLabel()
{
    m_LabelIsSet = false;
}

int32_t Field::getMaxLength() const
{
    return m_MaxLength;
}


void Field::setMaxLength(int32_t value)
{
    m_MaxLength = value;
    m_MaxLengthIsSet = true;
}
bool Field::maxLengthIsSet() const
{
    return m_MaxLengthIsSet;
}

void Field::unsetMaxLength()
{
    m_MaxLengthIsSet = false;
}

utility::string_t Field::getMaxValue() const
{
    return m_MaxValue;
}


void Field::setMaxValue(utility::string_t value)
{
    m_MaxValue = value;
    m_MaxValueIsSet = true;
}
bool Field::maxValueIsSet() const
{
    return m_MaxValueIsSet;
}

void Field::unsetMaxValue()
{
    m_MaxValueIsSet = false;
}

utility::string_t Field::getMinValue() const
{
    return m_MinValue;
}


void Field::setMinValue(utility::string_t value)
{
    m_MinValue = value;
    m_MinValueIsSet = true;
}
bool Field::minValueIsSet() const
{
    return m_MinValueIsSet;
}

void Field::unsetMinValue()
{
    m_MinValueIsSet = false;
}

utility::string_t Field::getName() const
{
    return m_Name;
}


void Field::setName(utility::string_t value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool Field::nameIsSet() const
{
    return m_NameIsSet;
}

void Field::unsetName()
{
    m_NameIsSet = false;
}

utility::string_t Field::getReference() const
{
    return m_Reference;
}


void Field::setReference(utility::string_t value)
{
    m_Reference = value;
    m_ReferenceIsSet = true;
}
bool Field::referenceIsSet() const
{
    return m_ReferenceIsSet;
}

void Field::unsetReference()
{
    m_ReferenceIsSet = false;
}

utility::string_t Field::getReferenceOptionText() const
{
    return m_ReferenceOptionText;
}


void Field::setReferenceOptionText(utility::string_t value)
{
    m_ReferenceOptionText = value;
    m_ReferenceOptionTextIsSet = true;
}
bool Field::referenceOptionTextIsSet() const
{
    return m_ReferenceOptionTextIsSet;
}

void Field::unsetReferenceOptionText()
{
    m_ReferenceOptionTextIsSet = false;
}

bool Field::getRequired() const
{
    return m_Required;
}


void Field::setRequired(bool value)
{
    m_Required = value;
    m_RequiredIsSet = true;
}
bool Field::requiredIsSet() const
{
    return m_RequiredIsSet;
}

void Field::unsetRequired()
{
    m_RequiredIsSet = false;
}

bool Field::getShowInCreate() const
{
    return m_ShowInCreate;
}


void Field::setShowInCreate(bool value)
{
    m_ShowInCreate = value;
    m_ShowInCreateIsSet = true;
}
bool Field::showInCreateIsSet() const
{
    return m_ShowInCreateIsSet;
}

void Field::unsetShowInCreate()
{
    m_ShowInCreateIsSet = false;
}

bool Field::getShowInEdit() const
{
    return m_ShowInEdit;
}


void Field::setShowInEdit(bool value)
{
    m_ShowInEdit = value;
    m_ShowInEditIsSet = true;
}
bool Field::showInEditIsSet() const
{
    return m_ShowInEditIsSet;
}

void Field::unsetShowInEdit()
{
    m_ShowInEditIsSet = false;
}

bool Field::getShowInFilter() const
{
    return m_ShowInFilter;
}


void Field::setShowInFilter(bool value)
{
    m_ShowInFilter = value;
    m_ShowInFilterIsSet = true;
}
bool Field::showInFilterIsSet() const
{
    return m_ShowInFilterIsSet;
}

void Field::unsetShowInFilter()
{
    m_ShowInFilterIsSet = false;
}

bool Field::getShowInList() const
{
    return m_ShowInList;
}


void Field::setShowInList(bool value)
{
    m_ShowInList = value;
    m_ShowInListIsSet = true;
}
bool Field::showInListIsSet() const
{
    return m_ShowInListIsSet;
}

void Field::unsetShowInList()
{
    m_ShowInListIsSet = false;
}

bool Field::getShowInShow() const
{
    return m_ShowInShow;
}


void Field::setShowInShow(bool value)
{
    m_ShowInShow = value;
    m_ShowInShowIsSet = true;
}
bool Field::showInShowIsSet() const
{
    return m_ShowInShowIsSet;
}

void Field::unsetShowInShow()
{
    m_ShowInShowIsSet = false;
}

}
}
}
}

