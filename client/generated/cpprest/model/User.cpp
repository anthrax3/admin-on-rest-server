/**
 * DataHive RESTful APIs
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "User.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

User::User()
{
    m_Email = U("");
    m_EmailIsSet = false;
    m_Enabled = false;
    m_EnabledIsSet = false;
    m_Id = U("");
    m_IdIsSet = false;
    m_LastPasswordResetDate = utility::datetime();
    m_LastPasswordResetDateIsSet = false;
    m_Password = U("");
    m_PasswordIsSet = false;
    m_RolesIsSet = false;
    m_Username = U("");
    m_UsernameIsSet = false;
}

User::~User()
{
}

void User::validate()
{
    // TODO: implement validation
}

web::json::value User::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_EmailIsSet)
    {
        val[U("email")] = ModelBase::toJson(m_Email);
    }
    if(m_EnabledIsSet)
    {
        val[U("enabled")] = ModelBase::toJson(m_Enabled);
    }
    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    if(m_LastPasswordResetDateIsSet)
    {
        val[U("lastPasswordResetDate")] = ModelBase::toJson(m_LastPasswordResetDate);
    }
    if(m_PasswordIsSet)
    {
        val[U("password")] = ModelBase::toJson(m_Password);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Roles )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[U("roles")] = web::json::value::array(jsonArray);
        }
    }
    if(m_UsernameIsSet)
    {
        val[U("username")] = ModelBase::toJson(m_Username);
    }

    return val;
}

void User::fromJson(web::json::value& val)
{
    if(val.has_field(U("email")))
    {
        setEmail(ModelBase::stringFromJson(val[U("email")]));
    }
    if(val.has_field(U("enabled")))
    {
        setEnabled(ModelBase::boolFromJson(val[U("enabled")]));
    }
    if(val.has_field(U("id")))
    {
        setId(ModelBase::stringFromJson(val[U("id")]));
    }
    if(val.has_field(U("lastPasswordResetDate")))
    {
        setLastPasswordResetDate(ModelBase::dateFromJson(val[U("lastPasswordResetDate")]));
    }
    if(val.has_field(U("password")))
    {
        setPassword(ModelBase::stringFromJson(val[U("password")]));
    }
    {
        m_Roles.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("roles")))
        {
        for( auto& item : val[U("roles")].as_array() )
        {
            if(item.is_null())
            {
                m_Roles.push_back( std::shared_ptr<Role>(nullptr) );
            }
            else
            {
                std::shared_ptr<Role> newItem(new Role());
                newItem->fromJson(item);
                m_Roles.push_back( newItem );
            }
        }
        }
    }
    if(val.has_field(U("username")))
    {
        setUsername(ModelBase::stringFromJson(val[U("username")]));
    }
}

void User::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_EmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("email"), m_Email));
        
    }
    if(m_EnabledIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("enabled"), m_Enabled));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
        
    }
    if(m_LastPasswordResetDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("lastPasswordResetDate"), m_LastPasswordResetDate));
        
    }
    if(m_PasswordIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("password"), m_Password));
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Roles )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("roles"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_UsernameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("username"), m_Username));
        
    }
}

void User::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("email")))
    {
        setEmail(ModelBase::stringFromHttpContent(multipart->getContent(U("email"))));
    }
    if(multipart->hasContent(U("enabled")))
    {
        setEnabled(ModelBase::boolFromHttpContent(multipart->getContent(U("enabled"))));
    }
    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::stringFromHttpContent(multipart->getContent(U("id"))));
    }
    if(multipart->hasContent(U("lastPasswordResetDate")))
    {
        setLastPasswordResetDate(ModelBase::dateFromHttpContent(multipart->getContent(U("lastPasswordResetDate"))));
    }
    if(multipart->hasContent(U("password")))
    {
        setPassword(ModelBase::stringFromHttpContent(multipart->getContent(U("password"))));
    }
    {
        m_Roles.clear();
        if(multipart->hasContent(U("roles")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("roles"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Roles.push_back( std::shared_ptr<Role>(nullptr) );
            }
            else
            {
                std::shared_ptr<Role> newItem(new Role());
                newItem->fromJson(item);
                m_Roles.push_back( newItem );
            }
        }
        }
    }
    if(multipart->hasContent(U("username")))
    {
        setUsername(ModelBase::stringFromHttpContent(multipart->getContent(U("username"))));
    }
}

utility::string_t User::getEmail() const
{
    return m_Email;
}


void User::setEmail(utility::string_t value)
{
    m_Email = value;
    m_EmailIsSet = true;
}
bool User::emailIsSet() const
{
    return m_EmailIsSet;
}

void User::unsetEmail()
{
    m_EmailIsSet = false;
}

bool User::getEnabled() const
{
    return m_Enabled;
}


void User::setEnabled(bool value)
{
    m_Enabled = value;
    m_EnabledIsSet = true;
}
bool User::enabledIsSet() const
{
    return m_EnabledIsSet;
}

void User::unsetEnabled()
{
    m_EnabledIsSet = false;
}

utility::string_t User::getId() const
{
    return m_Id;
}


void User::setId(utility::string_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool User::idIsSet() const
{
    return m_IdIsSet;
}

void User::unsetId()
{
    m_IdIsSet = false;
}

utility::datetime User::getLastPasswordResetDate() const
{
    return m_LastPasswordResetDate;
}


void User::setLastPasswordResetDate(utility::datetime value)
{
    m_LastPasswordResetDate = value;
    m_LastPasswordResetDateIsSet = true;
}
bool User::lastPasswordResetDateIsSet() const
{
    return m_LastPasswordResetDateIsSet;
}

void User::unsetLastPasswordResetDate()
{
    m_LastPasswordResetDateIsSet = false;
}

utility::string_t User::getPassword() const
{
    return m_Password;
}


void User::setPassword(utility::string_t value)
{
    m_Password = value;
    m_PasswordIsSet = true;
}
bool User::passwordIsSet() const
{
    return m_PasswordIsSet;
}

void User::unsetPassword()
{
    m_PasswordIsSet = false;
}

std::vector<std::shared_ptr<Role>>& User::getRoles()
{
    return m_Roles;
}

void User::setRoles(std::vector<std::shared_ptr<Role>> value)
{
    m_Roles = value;
    m_RolesIsSet = true;
}
bool User::rolesIsSet() const
{
    return m_RolesIsSet;
}

void User::unsetRoles()
{
    m_RolesIsSet = false;
}

utility::string_t User::getUsername() const
{
    return m_Username;
}


void User::setUsername(utility::string_t value)
{
    m_Username = value;
    m_UsernameIsSet = true;
}
bool User::usernameIsSet() const
{
    return m_UsernameIsSet;
}

void User::unsetUsername()
{
    m_UsernameIsSet = false;
}

}
}
}
}

