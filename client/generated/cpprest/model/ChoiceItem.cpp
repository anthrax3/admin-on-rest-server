/**
 * DataHive RESTful APIs
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "ChoiceItem.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

ChoiceItem::ChoiceItem()
{
    m_Id = U("");
    m_IdIsSet = false;
    m_Name = U("");
    m_NameIsSet = false;
}

ChoiceItem::~ChoiceItem()
{
}

void ChoiceItem::validate()
{
    // TODO: implement validation
}

web::json::value ChoiceItem::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val[U("name")] = ModelBase::toJson(m_Name);
    }

    return val;
}

void ChoiceItem::fromJson(web::json::value& val)
{
    if(val.has_field(U("id")))
    {
        setId(ModelBase::stringFromJson(val[U("id")]));
    }
    if(val.has_field(U("name")))
    {
        setName(ModelBase::stringFromJson(val[U("name")]));
    }
}

void ChoiceItem::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
        
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
        
    }
}

void ChoiceItem::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::stringFromHttpContent(multipart->getContent(U("id"))));
    }
    if(multipart->hasContent(U("name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
    }
}

utility::string_t ChoiceItem::getId() const
{
    return m_Id;
}


void ChoiceItem::setId(utility::string_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool ChoiceItem::idIsSet() const
{
    return m_IdIsSet;
}

void ChoiceItem::unsetId()
{
    m_IdIsSet = false;
}

utility::string_t ChoiceItem::getName() const
{
    return m_Name;
}


void ChoiceItem::setName(utility::string_t value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool ChoiceItem::nameIsSet() const
{
    return m_NameIsSet;
}

void ChoiceItem::unsetName()
{
    m_NameIsSet = false;
}

}
}
}
}

