/**
 * DataHive RESTful APIs
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "GrantedAuthority.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

GrantedAuthority::GrantedAuthority()
{
    m_Authority = U("");
    m_AuthorityIsSet = false;
}

GrantedAuthority::~GrantedAuthority()
{
}

void GrantedAuthority::validate()
{
    // TODO: implement validation
}

web::json::value GrantedAuthority::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_AuthorityIsSet)
    {
        val[U("authority")] = ModelBase::toJson(m_Authority);
    }

    return val;
}

void GrantedAuthority::fromJson(web::json::value& val)
{
    if(val.has_field(U("authority")))
    {
        setAuthority(ModelBase::stringFromJson(val[U("authority")]));
    }
}

void GrantedAuthority::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_AuthorityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("authority"), m_Authority));
        
    }
}

void GrantedAuthority::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("authority")))
    {
        setAuthority(ModelBase::stringFromHttpContent(multipart->getContent(U("authority"))));
    }
}

utility::string_t GrantedAuthority::getAuthority() const
{
    return m_Authority;
}


void GrantedAuthority::setAuthority(utility::string_t value)
{
    m_Authority = value;
    m_AuthorityIsSet = true;
}
bool GrantedAuthority::authorityIsSet() const
{
    return m_AuthorityIsSet;
}

void GrantedAuthority::unsetAuthority()
{
    m_AuthorityIsSet = false;
}

}
}
}
}

