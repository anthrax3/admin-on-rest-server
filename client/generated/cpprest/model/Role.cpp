/**
 * DataHive RESTful APIs
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Role.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Role::Role()
{
    m_Id = U("");
    m_IdIsSet = false;
    m_Name = U("");
    m_NameIsSet = false;
    m_UsersIsSet = false;
}

Role::~Role()
{
}

void Role::validate()
{
    // TODO: implement validation
}

web::json::value Role::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val[U("name")] = ModelBase::toJson(m_Name);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Users )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[U("users")] = web::json::value::array(jsonArray);
        }
    }

    return val;
}

void Role::fromJson(web::json::value& val)
{
    if(val.has_field(U("id")))
    {
        setId(ModelBase::stringFromJson(val[U("id")]));
    }
    if(val.has_field(U("name")))
    {
        setName(ModelBase::stringFromJson(val[U("name")]));
    }
    {
        m_Users.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("users")))
        {
        for( auto& item : val[U("users")].as_array() )
        {
            if(item.is_null())
            {
                m_Users.push_back( std::shared_ptr<User>(nullptr) );
            }
            else
            {
                std::shared_ptr<User> newItem(new User());
                newItem->fromJson(item);
                m_Users.push_back( newItem );
            }
        }
        }
    }
}

void Role::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
        
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Users )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("users"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
}

void Role::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::stringFromHttpContent(multipart->getContent(U("id"))));
    }
    if(multipart->hasContent(U("name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
    }
    {
        m_Users.clear();
        if(multipart->hasContent(U("users")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("users"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Users.push_back( std::shared_ptr<User>(nullptr) );
            }
            else
            {
                std::shared_ptr<User> newItem(new User());
                newItem->fromJson(item);
                m_Users.push_back( newItem );
            }
        }
        }
    }
}

utility::string_t Role::getId() const
{
    return m_Id;
}


void Role::setId(utility::string_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool Role::idIsSet() const
{
    return m_IdIsSet;
}

void Role::unsetId()
{
    m_IdIsSet = false;
}

utility::string_t Role::getName() const
{
    return m_Name;
}


void Role::setName(utility::string_t value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool Role::nameIsSet() const
{
    return m_NameIsSet;
}

void Role::unsetName()
{
    m_NameIsSet = false;
}

std::vector<std::shared_ptr<User>>& Role::getUsers()
{
    return m_Users;
}

void Role::setUsers(std::vector<std::shared_ptr<User>> value)
{
    m_Users = value;
    m_UsersIsSet = true;
}
bool Role::usersIsSet() const
{
    return m_UsersIsSet;
}

void Role::unsetUsers()
{
    m_UsersIsSet = false;
}

}
}
}
}

