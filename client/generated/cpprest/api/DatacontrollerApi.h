/**
 * DataHive RESTful APIs
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * DatacontrollerApi.h
 *
 * 
 */

#ifndef DatacontrollerApi_H_
#define DatacontrollerApi_H_


#include "ApiClient.h"

#include "Object.h"
#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace api {

using namespace io::swagger::client::model;

class  DatacontrollerApi
{
public:
    DatacontrollerApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~DatacontrollerApi();
    /// <summary>
    /// dataMutation
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="entity">entity</param>/// <param name="id">id</param>
    pplx::task<std::map<utility::string_t, std::shared_ptr<Object>>> dataMutationUsingDELETE(utility::string_t entity, utility::string_t id);
    /// <summary>
    /// dataMutation
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="entity">entity</param>/// <param name="allRequestParams">allRequestParams</param>
    pplx::task<std::map<utility::string_t, std::shared_ptr<Object>>> dataMutationUsingPOST(utility::string_t entity, std::shared_ptr<Object> allRequestParams);
    /// <summary>
    /// dataMutation
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="entity">entity</param>/// <param name="id">id</param>/// <param name="allRequestParams">allRequestParams</param>
    pplx::task<std::map<utility::string_t, std::shared_ptr<Object>>> dataMutationUsingPUT(utility::string_t entity, utility::string_t id, std::shared_ptr<Object> allRequestParams);
    /// <summary>
    /// dataQuery
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="entity">entity</param>
    pplx::task<std::map<utility::string_t, std::shared_ptr<Object>>> dataQueryUsingGET(utility::string_t entity);
    /// <summary>
    /// findOne
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="entity">entity</param>/// <param name="id">id</param>
    pplx::task<std::map<utility::string_t, std::shared_ptr<Object>>> findOneUsingGET(utility::string_t entity, utility::string_t id);

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* DatacontrollerApi_H_ */

