/**
 * DataHive RESTful APIs
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * SchemacontrollerApi.h
 *
 * 
 */

#ifndef SchemacontrollerApi_H_
#define SchemacontrollerApi_H_


#include "ApiClient.h"

#include "Entity.h"
#include "Field.h"
#include "ResponseEntity.h"
#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace api {

using namespace io::swagger::client::model;

class  SchemacontrollerApi
{
public:
    SchemacontrollerApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~SchemacontrollerApi();
    /// <summary>
    /// addEntity
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="entity">entity</param>
    pplx::task<std::shared_ptr<Entity>> addEntityUsingPOST(std::shared_ptr<Entity> entity);
    /// <summary>
    /// addField
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="field">field</param>
    pplx::task<std::shared_ptr<Field>> addFieldUsingPOST(std::shared_ptr<Field> field);
    /// <summary>
    /// editEntity
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">id</param>/// <param name="entity">entity</param>
    pplx::task<std::shared_ptr<Entity>> editEntityUsingPUT(utility::string_t id, std::shared_ptr<Entity> entity);
    /// <summary>
    /// editField
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">id</param>/// <param name="field">field</param>
    pplx::task<std::shared_ptr<Field>> editFieldUsingPUT(utility::string_t id, std::shared_ptr<Field> field);
    /// <summary>
    /// findAllFields
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="eid">eid</param>
    pplx::task<std::vector<std::shared_ptr<Field>>> findAllFieldsUsingGET(utility::string_t eid);
    /// <summary>
    /// findEntityFields
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="entityName">entityName</param>
    pplx::task<std::vector<std::shared_ptr<Field>>> findEntityFieldsUsingGET(utility::string_t entityName);
    /// <summary>
    /// findOneField
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="fid">fid</param>
    pplx::task<std::shared_ptr<Field>> findOneFieldUsingGET(utility::string_t fid);
    /// <summary>
    /// findOne
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="eid">eid</param>
    pplx::task<std::shared_ptr<Entity>> findOneUsingGET1(utility::string_t eid);
    /// <summary>
    /// getSchemas
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    
    pplx::task<std::vector<std::shared_ptr<Entity>>> getSchemasUsingGET();
    /// <summary>
    /// resetCurrentDs
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="dataSourceId">dataSourceId</param>
    pplx::task<std::shared_ptr<ResponseEntity>> resetCurrentDsUsingPUT(utility::string_t dataSourceId);
    /// <summary>
    /// syncSchemas
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="dataSourceId">dataSourceId</param>
    pplx::task<std::shared_ptr<ResponseEntity>> syncSchemasUsingPUT(utility::string_t dataSourceId);

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* SchemacontrollerApi_H_ */

