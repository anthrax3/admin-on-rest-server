# coding: utf-8

"""
    DataHive RESTful APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Permission(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'c': 'bool',
        'd': 'bool',
        'eid': 'str',
        'id': 'str',
        'r': 'bool',
        'role_id': 'str',
        'u': 'bool'
    }

    attribute_map = {
        'c': 'c',
        'd': 'd',
        'eid': 'eid',
        'id': 'id',
        'r': 'r',
        'role_id': 'roleId',
        'u': 'u'
    }

    def __init__(self, c=None, d=None, eid=None, id=None, r=None, role_id=None, u=None):
        """
        Permission - a model defined in Swagger
        """

        self._c = None
        self._d = None
        self._eid = None
        self._id = None
        self._r = None
        self._role_id = None
        self._u = None

        if c is not None:
          self.c = c
        if d is not None:
          self.d = d
        if eid is not None:
          self.eid = eid
        if id is not None:
          self.id = id
        if r is not None:
          self.r = r
        if role_id is not None:
          self.role_id = role_id
        if u is not None:
          self.u = u

    @property
    def c(self):
        """
        Gets the c of this Permission.

        :return: The c of this Permission.
        :rtype: bool
        """
        return self._c

    @c.setter
    def c(self, c):
        """
        Sets the c of this Permission.

        :param c: The c of this Permission.
        :type: bool
        """

        self._c = c

    @property
    def d(self):
        """
        Gets the d of this Permission.

        :return: The d of this Permission.
        :rtype: bool
        """
        return self._d

    @d.setter
    def d(self, d):
        """
        Sets the d of this Permission.

        :param d: The d of this Permission.
        :type: bool
        """

        self._d = d

    @property
    def eid(self):
        """
        Gets the eid of this Permission.

        :return: The eid of this Permission.
        :rtype: str
        """
        return self._eid

    @eid.setter
    def eid(self, eid):
        """
        Sets the eid of this Permission.

        :param eid: The eid of this Permission.
        :type: str
        """

        self._eid = eid

    @property
    def id(self):
        """
        Gets the id of this Permission.

        :return: The id of this Permission.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Permission.

        :param id: The id of this Permission.
        :type: str
        """

        self._id = id

    @property
    def r(self):
        """
        Gets the r of this Permission.

        :return: The r of this Permission.
        :rtype: bool
        """
        return self._r

    @r.setter
    def r(self, r):
        """
        Sets the r of this Permission.

        :param r: The r of this Permission.
        :type: bool
        """

        self._r = r

    @property
    def role_id(self):
        """
        Gets the role_id of this Permission.

        :return: The role_id of this Permission.
        :rtype: str
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """
        Sets the role_id of this Permission.

        :param role_id: The role_id of this Permission.
        :type: str
        """

        self._role_id = role_id

    @property
    def u(self):
        """
        Gets the u of this Permission.

        :return: The u of this Permission.
        :rtype: bool
        """
        return self._u

    @u.setter
    def u(self, u):
        """
        Sets the u of this Permission.

        :param u: The u of this Permission.
        :type: bool
        """

        self._u = u

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Permission):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
