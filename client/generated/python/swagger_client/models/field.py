# coding: utf-8

"""
    DataHive RESTful APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Field(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'choices': 'list[IChoiceItem]',
        'component': 'str',
        'data_source_id': 'str',
        'default_value': 'str',
        'eid': 'str',
        'id': 'str',
        'input_type': 'str',
        'is_auto_incremented': 'bool',
        'is_part_of_primary_key': 'bool',
        'label': 'str',
        'max_length': 'int',
        'max_value': 'str',
        'min_value': 'str',
        'name': 'str',
        'reference': 'str',
        'reference_option_text': 'str',
        'required': 'bool',
        'show_in_create': 'bool',
        'show_in_edit': 'bool',
        'show_in_filter': 'bool',
        'show_in_list': 'bool',
        'show_in_show': 'bool'
    }

    attribute_map = {
        'choices': 'choices',
        'component': 'component',
        'data_source_id': 'dataSourceId',
        'default_value': 'defaultValue',
        'eid': 'eid',
        'id': 'id',
        'input_type': 'inputType',
        'is_auto_incremented': 'isAutoIncremented',
        'is_part_of_primary_key': 'isPartOfPrimaryKey',
        'label': 'label',
        'max_length': 'maxLength',
        'max_value': 'maxValue',
        'min_value': 'minValue',
        'name': 'name',
        'reference': 'reference',
        'reference_option_text': 'referenceOptionText',
        'required': 'required',
        'show_in_create': 'showInCreate',
        'show_in_edit': 'showInEdit',
        'show_in_filter': 'showInFilter',
        'show_in_list': 'showInList',
        'show_in_show': 'showInShow'
    }

    def __init__(self, choices=None, component=None, data_source_id=None, default_value=None, eid=None, id=None, input_type=None, is_auto_incremented=None, is_part_of_primary_key=None, label=None, max_length=None, max_value=None, min_value=None, name=None, reference=None, reference_option_text=None, required=None, show_in_create=None, show_in_edit=None, show_in_filter=None, show_in_list=None, show_in_show=None):
        """
        Field - a model defined in Swagger
        """

        self._choices = None
        self._component = None
        self._data_source_id = None
        self._default_value = None
        self._eid = None
        self._id = None
        self._input_type = None
        self._is_auto_incremented = None
        self._is_part_of_primary_key = None
        self._label = None
        self._max_length = None
        self._max_value = None
        self._min_value = None
        self._name = None
        self._reference = None
        self._reference_option_text = None
        self._required = None
        self._show_in_create = None
        self._show_in_edit = None
        self._show_in_filter = None
        self._show_in_list = None
        self._show_in_show = None

        if choices is not None:
          self.choices = choices
        if component is not None:
          self.component = component
        if data_source_id is not None:
          self.data_source_id = data_source_id
        if default_value is not None:
          self.default_value = default_value
        if eid is not None:
          self.eid = eid
        if id is not None:
          self.id = id
        if input_type is not None:
          self.input_type = input_type
        if is_auto_incremented is not None:
          self.is_auto_incremented = is_auto_incremented
        if is_part_of_primary_key is not None:
          self.is_part_of_primary_key = is_part_of_primary_key
        if label is not None:
          self.label = label
        if max_length is not None:
          self.max_length = max_length
        if max_value is not None:
          self.max_value = max_value
        if min_value is not None:
          self.min_value = min_value
        if name is not None:
          self.name = name
        if reference is not None:
          self.reference = reference
        if reference_option_text is not None:
          self.reference_option_text = reference_option_text
        if required is not None:
          self.required = required
        if show_in_create is not None:
          self.show_in_create = show_in_create
        if show_in_edit is not None:
          self.show_in_edit = show_in_edit
        if show_in_filter is not None:
          self.show_in_filter = show_in_filter
        if show_in_list is not None:
          self.show_in_list = show_in_list
        if show_in_show is not None:
          self.show_in_show = show_in_show

    @property
    def choices(self):
        """
        Gets the choices of this Field.

        :return: The choices of this Field.
        :rtype: list[IChoiceItem]
        """
        return self._choices

    @choices.setter
    def choices(self, choices):
        """
        Sets the choices of this Field.

        :param choices: The choices of this Field.
        :type: list[IChoiceItem]
        """

        self._choices = choices

    @property
    def component(self):
        """
        Gets the component of this Field.

        :return: The component of this Field.
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """
        Sets the component of this Field.

        :param component: The component of this Field.
        :type: str
        """
        allowed_values = ["Autocomplete", "Boolean", "NullableBoolean", "CheckboxGroup", "Date", "Disabled", "File", "Image", "LongText", "Number", "RadioButtonGroup", "ReferenceArray", "Reference", "RichText", "SelectArray", "Select", "Text"]
        if component not in allowed_values:
            raise ValueError(
                "Invalid value for `component` ({0}), must be one of {1}"
                .format(component, allowed_values)
            )

        self._component = component

    @property
    def data_source_id(self):
        """
        Gets the data_source_id of this Field.

        :return: The data_source_id of this Field.
        :rtype: str
        """
        return self._data_source_id

    @data_source_id.setter
    def data_source_id(self, data_source_id):
        """
        Sets the data_source_id of this Field.

        :param data_source_id: The data_source_id of this Field.
        :type: str
        """

        self._data_source_id = data_source_id

    @property
    def default_value(self):
        """
        Gets the default_value of this Field.

        :return: The default_value of this Field.
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """
        Sets the default_value of this Field.

        :param default_value: The default_value of this Field.
        :type: str
        """

        self._default_value = default_value

    @property
    def eid(self):
        """
        Gets the eid of this Field.

        :return: The eid of this Field.
        :rtype: str
        """
        return self._eid

    @eid.setter
    def eid(self, eid):
        """
        Sets the eid of this Field.

        :param eid: The eid of this Field.
        :type: str
        """

        self._eid = eid

    @property
    def id(self):
        """
        Gets the id of this Field.

        :return: The id of this Field.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Field.

        :param id: The id of this Field.
        :type: str
        """

        self._id = id

    @property
    def input_type(self):
        """
        Gets the input_type of this Field.

        :return: The input_type of this Field.
        :rtype: str
        """
        return self._input_type

    @input_type.setter
    def input_type(self, input_type):
        """
        Sets the input_type of this Field.

        :param input_type: The input_type of this Field.
        :type: str
        """
        allowed_values = ["text", "email", "password", "url"]
        if input_type not in allowed_values:
            raise ValueError(
                "Invalid value for `input_type` ({0}), must be one of {1}"
                .format(input_type, allowed_values)
            )

        self._input_type = input_type

    @property
    def is_auto_incremented(self):
        """
        Gets the is_auto_incremented of this Field.

        :return: The is_auto_incremented of this Field.
        :rtype: bool
        """
        return self._is_auto_incremented

    @is_auto_incremented.setter
    def is_auto_incremented(self, is_auto_incremented):
        """
        Sets the is_auto_incremented of this Field.

        :param is_auto_incremented: The is_auto_incremented of this Field.
        :type: bool
        """

        self._is_auto_incremented = is_auto_incremented

    @property
    def is_part_of_primary_key(self):
        """
        Gets the is_part_of_primary_key of this Field.

        :return: The is_part_of_primary_key of this Field.
        :rtype: bool
        """
        return self._is_part_of_primary_key

    @is_part_of_primary_key.setter
    def is_part_of_primary_key(self, is_part_of_primary_key):
        """
        Sets the is_part_of_primary_key of this Field.

        :param is_part_of_primary_key: The is_part_of_primary_key of this Field.
        :type: bool
        """

        self._is_part_of_primary_key = is_part_of_primary_key

    @property
    def label(self):
        """
        Gets the label of this Field.

        :return: The label of this Field.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this Field.

        :param label: The label of this Field.
        :type: str
        """

        self._label = label

    @property
    def max_length(self):
        """
        Gets the max_length of this Field.

        :return: The max_length of this Field.
        :rtype: int
        """
        return self._max_length

    @max_length.setter
    def max_length(self, max_length):
        """
        Sets the max_length of this Field.

        :param max_length: The max_length of this Field.
        :type: int
        """

        self._max_length = max_length

    @property
    def max_value(self):
        """
        Gets the max_value of this Field.

        :return: The max_value of this Field.
        :rtype: str
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """
        Sets the max_value of this Field.

        :param max_value: The max_value of this Field.
        :type: str
        """

        self._max_value = max_value

    @property
    def min_value(self):
        """
        Gets the min_value of this Field.

        :return: The min_value of this Field.
        :rtype: str
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value):
        """
        Sets the min_value of this Field.

        :param min_value: The min_value of this Field.
        :type: str
        """

        self._min_value = min_value

    @property
    def name(self):
        """
        Gets the name of this Field.

        :return: The name of this Field.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Field.

        :param name: The name of this Field.
        :type: str
        """

        self._name = name

    @property
    def reference(self):
        """
        Gets the reference of this Field.

        :return: The reference of this Field.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """
        Sets the reference of this Field.

        :param reference: The reference of this Field.
        :type: str
        """

        self._reference = reference

    @property
    def reference_option_text(self):
        """
        Gets the reference_option_text of this Field.

        :return: The reference_option_text of this Field.
        :rtype: str
        """
        return self._reference_option_text

    @reference_option_text.setter
    def reference_option_text(self, reference_option_text):
        """
        Sets the reference_option_text of this Field.

        :param reference_option_text: The reference_option_text of this Field.
        :type: str
        """

        self._reference_option_text = reference_option_text

    @property
    def required(self):
        """
        Gets the required of this Field.

        :return: The required of this Field.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """
        Sets the required of this Field.

        :param required: The required of this Field.
        :type: bool
        """

        self._required = required

    @property
    def show_in_create(self):
        """
        Gets the show_in_create of this Field.

        :return: The show_in_create of this Field.
        :rtype: bool
        """
        return self._show_in_create

    @show_in_create.setter
    def show_in_create(self, show_in_create):
        """
        Sets the show_in_create of this Field.

        :param show_in_create: The show_in_create of this Field.
        :type: bool
        """

        self._show_in_create = show_in_create

    @property
    def show_in_edit(self):
        """
        Gets the show_in_edit of this Field.

        :return: The show_in_edit of this Field.
        :rtype: bool
        """
        return self._show_in_edit

    @show_in_edit.setter
    def show_in_edit(self, show_in_edit):
        """
        Sets the show_in_edit of this Field.

        :param show_in_edit: The show_in_edit of this Field.
        :type: bool
        """

        self._show_in_edit = show_in_edit

    @property
    def show_in_filter(self):
        """
        Gets the show_in_filter of this Field.

        :return: The show_in_filter of this Field.
        :rtype: bool
        """
        return self._show_in_filter

    @show_in_filter.setter
    def show_in_filter(self, show_in_filter):
        """
        Sets the show_in_filter of this Field.

        :param show_in_filter: The show_in_filter of this Field.
        :type: bool
        """

        self._show_in_filter = show_in_filter

    @property
    def show_in_list(self):
        """
        Gets the show_in_list of this Field.

        :return: The show_in_list of this Field.
        :rtype: bool
        """
        return self._show_in_list

    @show_in_list.setter
    def show_in_list(self, show_in_list):
        """
        Sets the show_in_list of this Field.

        :param show_in_list: The show_in_list of this Field.
        :type: bool
        """

        self._show_in_list = show_in_list

    @property
    def show_in_show(self):
        """
        Gets the show_in_show of this Field.

        :return: The show_in_show of this Field.
        :rtype: bool
        """
        return self._show_in_show

    @show_in_show.setter
    def show_in_show(self, show_in_show):
        """
        Sets the show_in_show of this Field.

        :param show_in_show: The show_in_show of this Field.
        :type: bool
        """

        self._show_in_show = show_in_show

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Field):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
