# coding: utf-8

"""
    DataHive RESTful APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Entity(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'crud': 'list[str]',
        'fields': 'list[Field]',
        'id': 'str',
        'label': 'str',
        'name': 'str',
        'redirect': 'str',
        'show_in_menu': 'bool'
    }

    attribute_map = {
        'crud': 'crud',
        'fields': 'fields',
        'id': 'id',
        'label': 'label',
        'name': 'name',
        'redirect': 'redirect',
        'show_in_menu': 'showInMenu'
    }

    def __init__(self, crud=None, fields=None, id=None, label=None, name=None, redirect=None, show_in_menu=None):
        """
        Entity - a model defined in Swagger
        """

        self._crud = None
        self._fields = None
        self._id = None
        self._label = None
        self._name = None
        self._redirect = None
        self._show_in_menu = None

        if crud is not None:
          self.crud = crud
        if fields is not None:
          self.fields = fields
        if id is not None:
          self.id = id
        if label is not None:
          self.label = label
        if name is not None:
          self.name = name
        if redirect is not None:
          self.redirect = redirect
        if show_in_menu is not None:
          self.show_in_menu = show_in_menu

    @property
    def crud(self):
        """
        Gets the crud of this Entity.

        :return: The crud of this Entity.
        :rtype: list[str]
        """
        return self._crud

    @crud.setter
    def crud(self, crud):
        """
        Sets the crud of this Entity.

        :param crud: The crud of this Entity.
        :type: list[str]
        """
        allowed_values = ["c", "r", "u", "d"]
        if not set(crud).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `crud` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(crud)-set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._crud = crud

    @property
    def fields(self):
        """
        Gets the fields of this Entity.

        :return: The fields of this Entity.
        :rtype: list[Field]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """
        Sets the fields of this Entity.

        :param fields: The fields of this Entity.
        :type: list[Field]
        """

        self._fields = fields

    @property
    def id(self):
        """
        Gets the id of this Entity.

        :return: The id of this Entity.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Entity.

        :param id: The id of this Entity.
        :type: str
        """

        self._id = id

    @property
    def label(self):
        """
        Gets the label of this Entity.

        :return: The label of this Entity.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this Entity.

        :param label: The label of this Entity.
        :type: str
        """

        self._label = label

    @property
    def name(self):
        """
        Gets the name of this Entity.

        :return: The name of this Entity.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Entity.

        :param name: The name of this Entity.
        :type: str
        """

        self._name = name

    @property
    def redirect(self):
        """
        Gets the redirect of this Entity.

        :return: The redirect of this Entity.
        :rtype: str
        """
        return self._redirect

    @redirect.setter
    def redirect(self, redirect):
        """
        Sets the redirect of this Entity.

        :param redirect: The redirect of this Entity.
        :type: str
        """
        allowed_values = ["edit", "show", "list"]
        if redirect not in allowed_values:
            raise ValueError(
                "Invalid value for `redirect` ({0}), must be one of {1}"
                .format(redirect, allowed_values)
            )

        self._redirect = redirect

    @property
    def show_in_menu(self):
        """
        Gets the show_in_menu of this Entity.

        :return: The show_in_menu of this Entity.
        :rtype: bool
        """
        return self._show_in_menu

    @show_in_menu.setter
    def show_in_menu(self, show_in_menu):
        """
        Sets the show_in_menu of this Entity.

        :param show_in_menu: The show_in_menu of this Entity.
        :type: bool
        """

        self._show_in_menu = show_in_menu

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Entity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
