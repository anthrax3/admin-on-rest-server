/**
 * DataHive RESTful APIs
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class SchemacontrollerApi {
    protected basePath = 'https://localhost:8080';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

    constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }

    /**
     * 
     * @summary addEntity
     * @param entity entity
     */
    public addEntityUsingPOST (entity: models.Entity, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.Entity> {
        const localVarPath = this.basePath + '/schemas/_entitys';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'entity' is not null or undefined
        if (entity === null || entity === undefined) {
            throw new Error('Required parameter entity was null or undefined when calling addEntityUsingPOST.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: entity,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary addField
     * @param field field
     */
    public addFieldUsingPOST (field: models.Field, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.Field> {
        const localVarPath = this.basePath + '/schemas/_fields';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'field' is not null or undefined
        if (field === null || field === undefined) {
            throw new Error('Required parameter field was null or undefined when calling addFieldUsingPOST.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: field,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary editEntity
     * @param id id
     * @param entity entity
     */
    public editEntityUsingPUT (id: string, entity: models.Entity, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.Entity> {
        const localVarPath = this.basePath + '/schemas/_entitys/put/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling editEntityUsingPUT.');
        }
        // verify required parameter 'entity' is not null or undefined
        if (entity === null || entity === undefined) {
            throw new Error('Required parameter entity was null or undefined when calling editEntityUsingPUT.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'PUT',
            url: localVarPath,
            data: entity,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary editField
     * @param id id
     * @param field field
     */
    public editFieldUsingPUT (id: string, field: models.Field, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.Field> {
        const localVarPath = this.basePath + '/schemas/_fields/put/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling editFieldUsingPUT.');
        }
        // verify required parameter 'field' is not null or undefined
        if (field === null || field === undefined) {
            throw new Error('Required parameter field was null or undefined when calling editFieldUsingPUT.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'PUT',
            url: localVarPath,
            data: field,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary findAllFields
     * @param eid eid
     */
    public findAllFieldsUsingGET (eid: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<models.Field>> {
        const localVarPath = this.basePath + '/schemas/_fields';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling findAllFieldsUsingGET.');
        }
        if (eid !== undefined) {
            queryParameters['eid'] = eid;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary findEntityFields
     * @param entityName entityName
     */
    public findEntityFieldsUsingGET (entityName: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<models.Field>> {
        const localVarPath = this.basePath + '/schemas/fields';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'entityName' is not null or undefined
        if (entityName === null || entityName === undefined) {
            throw new Error('Required parameter entityName was null or undefined when calling findEntityFieldsUsingGET.');
        }
        if (entityName !== undefined) {
            queryParameters['entityName'] = entityName;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary findOneField
     * @param fid fid
     */
    public findOneFieldUsingGET (fid: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.Field> {
        const localVarPath = this.basePath + '/schemas/_fields/{fid}'
            .replace('{' + 'fid' + '}', String(fid));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'fid' is not null or undefined
        if (fid === null || fid === undefined) {
            throw new Error('Required parameter fid was null or undefined when calling findOneFieldUsingGET.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary findOne
     * @param eid eid
     */
    public findOneUsingGET1 (eid: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.Entity> {
        const localVarPath = this.basePath + '/schemas/_entitys/{eid}'
            .replace('{' + 'eid' + '}', String(eid));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling findOneUsingGET1.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary getSchemas
     */
    public getSchemasUsingGET (extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<models.Entity>> {
        const localVarPath = this.basePath + '/schemas/_entitys';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary resetCurrentDs
     * @param dataSourceId dataSourceId
     */
    public resetCurrentDsUsingPUT (dataSourceId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.ResponseEntity> {
        const localVarPath = this.basePath + '/schemas/resetCurrentDs/{dataSourceId}'
            .replace('{' + 'dataSourceId' + '}', String(dataSourceId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'dataSourceId' is not null or undefined
        if (dataSourceId === null || dataSourceId === undefined) {
            throw new Error('Required parameter dataSourceId was null or undefined when calling resetCurrentDsUsingPUT.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'PUT',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary syncSchemas
     * @param dataSourceId dataSourceId
     */
    public syncSchemasUsingPUT (dataSourceId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.ResponseEntity> {
        const localVarPath = this.basePath + '/schemas/sync/{dataSourceId}'
            .replace('{' + 'dataSourceId' + '}', String(dataSourceId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'dataSourceId' is not null or undefined
        if (dataSourceId === null || dataSourceId === undefined) {
            throw new Error('Required parameter dataSourceId was null or undefined when calling syncSchemasUsingPUT.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'PUT',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
}
