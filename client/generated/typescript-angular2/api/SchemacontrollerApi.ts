/**
 * DataHive RESTful APIs
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class SchemacontrollerApi {

    protected basePath = 'https://localhost:8080';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * 
     * @summary addEntity
     * @param entity entity
     */
    public addEntityUsingPOST(entity: models.Entity, extraHttpRequestParams?: any): Observable<models.Entity> {
        return this.addEntityUsingPOSTWithHttpInfo(entity, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary addField
     * @param field field
     */
    public addFieldUsingPOST(field: models.Field, extraHttpRequestParams?: any): Observable<models.Field> {
        return this.addFieldUsingPOSTWithHttpInfo(field, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary editEntity
     * @param id id
     * @param entity entity
     */
    public editEntityUsingPUT(id: string, entity: models.Entity, extraHttpRequestParams?: any): Observable<models.Entity> {
        return this.editEntityUsingPUTWithHttpInfo(id, entity, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary editField
     * @param id id
     * @param field field
     */
    public editFieldUsingPUT(id: string, field: models.Field, extraHttpRequestParams?: any): Observable<models.Field> {
        return this.editFieldUsingPUTWithHttpInfo(id, field, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary findAllFields
     * @param eid eid
     */
    public findAllFieldsUsingGET(eid: string, extraHttpRequestParams?: any): Observable<Array<models.Field>> {
        return this.findAllFieldsUsingGETWithHttpInfo(eid, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary findEntityFields
     * @param entityName entityName
     */
    public findEntityFieldsUsingGET(entityName: string, extraHttpRequestParams?: any): Observable<Array<models.Field>> {
        return this.findEntityFieldsUsingGETWithHttpInfo(entityName, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary findOneField
     * @param fid fid
     */
    public findOneFieldUsingGET(fid: string, extraHttpRequestParams?: any): Observable<models.Field> {
        return this.findOneFieldUsingGETWithHttpInfo(fid, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary findOne
     * @param eid eid
     */
    public findOneUsingGET1(eid: string, extraHttpRequestParams?: any): Observable<models.Entity> {
        return this.findOneUsingGET1WithHttpInfo(eid, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary getSchemas
     */
    public getSchemasUsingGET(extraHttpRequestParams?: any): Observable<Array<models.Entity>> {
        return this.getSchemasUsingGETWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary resetCurrentDs
     * @param dataSourceId dataSourceId
     */
    public resetCurrentDsUsingPUT(dataSourceId: string, extraHttpRequestParams?: any): Observable<models.ResponseEntity> {
        return this.resetCurrentDsUsingPUTWithHttpInfo(dataSourceId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary syncSchemas
     * @param dataSourceId dataSourceId
     */
    public syncSchemasUsingPUT(dataSourceId: string, extraHttpRequestParams?: any): Observable<models.ResponseEntity> {
        return this.syncSchemasUsingPUTWithHttpInfo(dataSourceId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }


    /**
     * addEntity
     * 
     * @param entity entity
     */
    public addEntityUsingPOSTWithHttpInfo(entity: models.Entity, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/schemas/_entitys';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'entity' is not null or undefined
        if (entity === null || entity === undefined) {
            throw new Error('Required parameter entity was null or undefined when calling addEntityUsingPOST.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            '*/*'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: entity == null ? '' : JSON.stringify(entity), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * addField
     * 
     * @param field field
     */
    public addFieldUsingPOSTWithHttpInfo(field: models.Field, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/schemas/_fields';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'field' is not null or undefined
        if (field === null || field === undefined) {
            throw new Error('Required parameter field was null or undefined when calling addFieldUsingPOST.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            '*/*'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: field == null ? '' : JSON.stringify(field), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * editEntity
     * 
     * @param id id
     * @param entity entity
     */
    public editEntityUsingPUTWithHttpInfo(id: string, entity: models.Entity, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/schemas/_entitys/put/${id}'
                    .replace('${' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling editEntityUsingPUT.');
        }
        // verify required parameter 'entity' is not null or undefined
        if (entity === null || entity === undefined) {
            throw new Error('Required parameter entity was null or undefined when calling editEntityUsingPUT.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            '*/*'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: entity == null ? '' : JSON.stringify(entity), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * editField
     * 
     * @param id id
     * @param field field
     */
    public editFieldUsingPUTWithHttpInfo(id: string, field: models.Field, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/schemas/_fields/put/${id}'
                    .replace('${' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling editFieldUsingPUT.');
        }
        // verify required parameter 'field' is not null or undefined
        if (field === null || field === undefined) {
            throw new Error('Required parameter field was null or undefined when calling editFieldUsingPUT.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            '*/*'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: field == null ? '' : JSON.stringify(field), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * findAllFields
     * 
     * @param eid eid
     */
    public findAllFieldsUsingGETWithHttpInfo(eid: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/schemas/_fields';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling findAllFieldsUsingGET.');
        }
        if (eid !== undefined) {
            queryParameters.set('eid', <any>eid);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            '*/*'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * findEntityFields
     * 
     * @param entityName entityName
     */
    public findEntityFieldsUsingGETWithHttpInfo(entityName: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/schemas/fields';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'entityName' is not null or undefined
        if (entityName === null || entityName === undefined) {
            throw new Error('Required parameter entityName was null or undefined when calling findEntityFieldsUsingGET.');
        }
        if (entityName !== undefined) {
            queryParameters.set('entityName', <any>entityName);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            '*/*'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * findOneField
     * 
     * @param fid fid
     */
    public findOneFieldUsingGETWithHttpInfo(fid: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/schemas/_fields/${fid}'
                    .replace('${' + 'fid' + '}', String(fid));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'fid' is not null or undefined
        if (fid === null || fid === undefined) {
            throw new Error('Required parameter fid was null or undefined when calling findOneFieldUsingGET.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            '*/*'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * findOne
     * 
     * @param eid eid
     */
    public findOneUsingGET1WithHttpInfo(eid: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/schemas/_entitys/${eid}'
                    .replace('${' + 'eid' + '}', String(eid));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'eid' is not null or undefined
        if (eid === null || eid === undefined) {
            throw new Error('Required parameter eid was null or undefined when calling findOneUsingGET1.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            '*/*'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * getSchemas
     * 
     */
    public getSchemasUsingGETWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/schemas/_entitys';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            '*/*'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * resetCurrentDs
     * 
     * @param dataSourceId dataSourceId
     */
    public resetCurrentDsUsingPUTWithHttpInfo(dataSourceId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/schemas/resetCurrentDs/${dataSourceId}'
                    .replace('${' + 'dataSourceId' + '}', String(dataSourceId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'dataSourceId' is not null or undefined
        if (dataSourceId === null || dataSourceId === undefined) {
            throw new Error('Required parameter dataSourceId was null or undefined when calling resetCurrentDsUsingPUT.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            '*/*'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * syncSchemas
     * 
     * @param dataSourceId dataSourceId
     */
    public syncSchemasUsingPUTWithHttpInfo(dataSourceId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/schemas/sync/${dataSourceId}'
                    .replace('${' + 'dataSourceId' + '}', String(dataSourceId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'dataSourceId' is not null or undefined
        if (dataSourceId === null || dataSourceId === undefined) {
            throw new Error('Required parameter dataSourceId was null or undefined when calling syncSchemasUsingPUT.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            '*/*'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
