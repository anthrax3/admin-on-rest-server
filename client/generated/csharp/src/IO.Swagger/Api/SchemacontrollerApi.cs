/* 
 * DataHive RESTful APIs
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISchemacontrollerApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// addEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entity">entity</param>
        /// <returns>Entity</returns>
        Entity AddEntityUsingPOST (Entity entity);

        /// <summary>
        /// addEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entity">entity</param>
        /// <returns>ApiResponse of Entity</returns>
        ApiResponse<Entity> AddEntityUsingPOSTWithHttpInfo (Entity entity);
        /// <summary>
        /// addField
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="field">field</param>
        /// <returns>Field</returns>
        Field AddFieldUsingPOST (Field field);

        /// <summary>
        /// addField
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="field">field</param>
        /// <returns>ApiResponse of Field</returns>
        ApiResponse<Field> AddFieldUsingPOSTWithHttpInfo (Field field);
        /// <summary>
        /// editEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="entity">entity</param>
        /// <returns>Entity</returns>
        Entity EditEntityUsingPUT (string id, Entity entity);

        /// <summary>
        /// editEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="entity">entity</param>
        /// <returns>ApiResponse of Entity</returns>
        ApiResponse<Entity> EditEntityUsingPUTWithHttpInfo (string id, Entity entity);
        /// <summary>
        /// editField
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="field">field</param>
        /// <returns>Field</returns>
        Field EditFieldUsingPUT (string id, Field field);

        /// <summary>
        /// editField
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="field">field</param>
        /// <returns>ApiResponse of Field</returns>
        ApiResponse<Field> EditFieldUsingPUTWithHttpInfo (string id, Field field);
        /// <summary>
        /// findAllFields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eid">eid</param>
        /// <returns>List&lt;Field&gt;</returns>
        List<Field> FindAllFieldsUsingGET (string eid);

        /// <summary>
        /// findAllFields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eid">eid</param>
        /// <returns>ApiResponse of List&lt;Field&gt;</returns>
        ApiResponse<List<Field>> FindAllFieldsUsingGETWithHttpInfo (string eid);
        /// <summary>
        /// findEntityFields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName">entityName</param>
        /// <returns>List&lt;Field&gt;</returns>
        List<Field> FindEntityFieldsUsingGET (string entityName);

        /// <summary>
        /// findEntityFields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName">entityName</param>
        /// <returns>ApiResponse of List&lt;Field&gt;</returns>
        ApiResponse<List<Field>> FindEntityFieldsUsingGETWithHttpInfo (string entityName);
        /// <summary>
        /// findOneField
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fid">fid</param>
        /// <returns>Field</returns>
        Field FindOneFieldUsingGET (string fid);

        /// <summary>
        /// findOneField
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fid">fid</param>
        /// <returns>ApiResponse of Field</returns>
        ApiResponse<Field> FindOneFieldUsingGETWithHttpInfo (string fid);
        /// <summary>
        /// findOne
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eid">eid</param>
        /// <returns>Entity</returns>
        Entity FindOneUsingGET1 (string eid);

        /// <summary>
        /// findOne
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eid">eid</param>
        /// <returns>ApiResponse of Entity</returns>
        ApiResponse<Entity> FindOneUsingGET1WithHttpInfo (string eid);
        /// <summary>
        /// getSchemas
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Entity&gt;</returns>
        List<Entity> GetSchemasUsingGET ();

        /// <summary>
        /// getSchemas
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Entity&gt;</returns>
        ApiResponse<List<Entity>> GetSchemasUsingGETWithHttpInfo ();
        /// <summary>
        /// resetCurrentDs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataSourceId">dataSourceId</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity ResetCurrentDsUsingPUT (string dataSourceId);

        /// <summary>
        /// resetCurrentDs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataSourceId">dataSourceId</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> ResetCurrentDsUsingPUTWithHttpInfo (string dataSourceId);
        /// <summary>
        /// syncSchemas
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataSourceId">dataSourceId</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity SyncSchemasUsingPUT (string dataSourceId);

        /// <summary>
        /// syncSchemas
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataSourceId">dataSourceId</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> SyncSchemasUsingPUTWithHttpInfo (string dataSourceId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// addEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entity">entity</param>
        /// <returns>Task of Entity</returns>
        System.Threading.Tasks.Task<Entity> AddEntityUsingPOSTAsync (Entity entity);

        /// <summary>
        /// addEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entity">entity</param>
        /// <returns>Task of ApiResponse (Entity)</returns>
        System.Threading.Tasks.Task<ApiResponse<Entity>> AddEntityUsingPOSTAsyncWithHttpInfo (Entity entity);
        /// <summary>
        /// addField
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="field">field</param>
        /// <returns>Task of Field</returns>
        System.Threading.Tasks.Task<Field> AddFieldUsingPOSTAsync (Field field);

        /// <summary>
        /// addField
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="field">field</param>
        /// <returns>Task of ApiResponse (Field)</returns>
        System.Threading.Tasks.Task<ApiResponse<Field>> AddFieldUsingPOSTAsyncWithHttpInfo (Field field);
        /// <summary>
        /// editEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="entity">entity</param>
        /// <returns>Task of Entity</returns>
        System.Threading.Tasks.Task<Entity> EditEntityUsingPUTAsync (string id, Entity entity);

        /// <summary>
        /// editEntity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="entity">entity</param>
        /// <returns>Task of ApiResponse (Entity)</returns>
        System.Threading.Tasks.Task<ApiResponse<Entity>> EditEntityUsingPUTAsyncWithHttpInfo (string id, Entity entity);
        /// <summary>
        /// editField
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="field">field</param>
        /// <returns>Task of Field</returns>
        System.Threading.Tasks.Task<Field> EditFieldUsingPUTAsync (string id, Field field);

        /// <summary>
        /// editField
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="field">field</param>
        /// <returns>Task of ApiResponse (Field)</returns>
        System.Threading.Tasks.Task<ApiResponse<Field>> EditFieldUsingPUTAsyncWithHttpInfo (string id, Field field);
        /// <summary>
        /// findAllFields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eid">eid</param>
        /// <returns>Task of List&lt;Field&gt;</returns>
        System.Threading.Tasks.Task<List<Field>> FindAllFieldsUsingGETAsync (string eid);

        /// <summary>
        /// findAllFields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eid">eid</param>
        /// <returns>Task of ApiResponse (List&lt;Field&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Field>>> FindAllFieldsUsingGETAsyncWithHttpInfo (string eid);
        /// <summary>
        /// findEntityFields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName">entityName</param>
        /// <returns>Task of List&lt;Field&gt;</returns>
        System.Threading.Tasks.Task<List<Field>> FindEntityFieldsUsingGETAsync (string entityName);

        /// <summary>
        /// findEntityFields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName">entityName</param>
        /// <returns>Task of ApiResponse (List&lt;Field&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Field>>> FindEntityFieldsUsingGETAsyncWithHttpInfo (string entityName);
        /// <summary>
        /// findOneField
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fid">fid</param>
        /// <returns>Task of Field</returns>
        System.Threading.Tasks.Task<Field> FindOneFieldUsingGETAsync (string fid);

        /// <summary>
        /// findOneField
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fid">fid</param>
        /// <returns>Task of ApiResponse (Field)</returns>
        System.Threading.Tasks.Task<ApiResponse<Field>> FindOneFieldUsingGETAsyncWithHttpInfo (string fid);
        /// <summary>
        /// findOne
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eid">eid</param>
        /// <returns>Task of Entity</returns>
        System.Threading.Tasks.Task<Entity> FindOneUsingGET1Async (string eid);

        /// <summary>
        /// findOne
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eid">eid</param>
        /// <returns>Task of ApiResponse (Entity)</returns>
        System.Threading.Tasks.Task<ApiResponse<Entity>> FindOneUsingGET1AsyncWithHttpInfo (string eid);
        /// <summary>
        /// getSchemas
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Entity&gt;</returns>
        System.Threading.Tasks.Task<List<Entity>> GetSchemasUsingGETAsync ();

        /// <summary>
        /// getSchemas
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Entity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Entity>>> GetSchemasUsingGETAsyncWithHttpInfo ();
        /// <summary>
        /// resetCurrentDs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataSourceId">dataSourceId</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> ResetCurrentDsUsingPUTAsync (string dataSourceId);

        /// <summary>
        /// resetCurrentDs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataSourceId">dataSourceId</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ResetCurrentDsUsingPUTAsyncWithHttpInfo (string dataSourceId);
        /// <summary>
        /// syncSchemas
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataSourceId">dataSourceId</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> SyncSchemasUsingPUTAsync (string dataSourceId);

        /// <summary>
        /// syncSchemas
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataSourceId">dataSourceId</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> SyncSchemasUsingPUTAsyncWithHttpInfo (string dataSourceId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SchemacontrollerApi : ISchemacontrollerApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SchemacontrollerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SchemacontrollerApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SchemacontrollerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SchemacontrollerApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// addEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entity">entity</param>
        /// <returns>Entity</returns>
        public Entity AddEntityUsingPOST (Entity entity)
        {
             ApiResponse<Entity> localVarResponse = AddEntityUsingPOSTWithHttpInfo(entity);
             return localVarResponse.Data;
        }

        /// <summary>
        /// addEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entity">entity</param>
        /// <returns>ApiResponse of Entity</returns>
        public ApiResponse< Entity > AddEntityUsingPOSTWithHttpInfo (Entity entity)
        {
            // verify the required parameter 'entity' is set
            if (entity == null)
                throw new ApiException(400, "Missing required parameter 'entity' when calling SchemacontrollerApi->AddEntityUsingPOST");

            var localVarPath = "/schemas/_entitys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entity != null && entity.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(entity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = entity; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddEntityUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Entity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Entity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Entity)));
        }

        /// <summary>
        /// addEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entity">entity</param>
        /// <returns>Task of Entity</returns>
        public async System.Threading.Tasks.Task<Entity> AddEntityUsingPOSTAsync (Entity entity)
        {
             ApiResponse<Entity> localVarResponse = await AddEntityUsingPOSTAsyncWithHttpInfo(entity);
             return localVarResponse.Data;

        }

        /// <summary>
        /// addEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entity">entity</param>
        /// <returns>Task of ApiResponse (Entity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Entity>> AddEntityUsingPOSTAsyncWithHttpInfo (Entity entity)
        {
            // verify the required parameter 'entity' is set
            if (entity == null)
                throw new ApiException(400, "Missing required parameter 'entity' when calling SchemacontrollerApi->AddEntityUsingPOST");

            var localVarPath = "/schemas/_entitys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entity != null && entity.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(entity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = entity; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddEntityUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Entity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Entity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Entity)));
        }

        /// <summary>
        /// addField 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="field">field</param>
        /// <returns>Field</returns>
        public Field AddFieldUsingPOST (Field field)
        {
             ApiResponse<Field> localVarResponse = AddFieldUsingPOSTWithHttpInfo(field);
             return localVarResponse.Data;
        }

        /// <summary>
        /// addField 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="field">field</param>
        /// <returns>ApiResponse of Field</returns>
        public ApiResponse< Field > AddFieldUsingPOSTWithHttpInfo (Field field)
        {
            // verify the required parameter 'field' is set
            if (field == null)
                throw new ApiException(400, "Missing required parameter 'field' when calling SchemacontrollerApi->AddFieldUsingPOST");

            var localVarPath = "/schemas/_fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (field != null && field.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(field); // http body (model) parameter
            }
            else
            {
                localVarPostBody = field; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFieldUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Field>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Field) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Field)));
        }

        /// <summary>
        /// addField 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="field">field</param>
        /// <returns>Task of Field</returns>
        public async System.Threading.Tasks.Task<Field> AddFieldUsingPOSTAsync (Field field)
        {
             ApiResponse<Field> localVarResponse = await AddFieldUsingPOSTAsyncWithHttpInfo(field);
             return localVarResponse.Data;

        }

        /// <summary>
        /// addField 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="field">field</param>
        /// <returns>Task of ApiResponse (Field)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Field>> AddFieldUsingPOSTAsyncWithHttpInfo (Field field)
        {
            // verify the required parameter 'field' is set
            if (field == null)
                throw new ApiException(400, "Missing required parameter 'field' when calling SchemacontrollerApi->AddFieldUsingPOST");

            var localVarPath = "/schemas/_fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (field != null && field.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(field); // http body (model) parameter
            }
            else
            {
                localVarPostBody = field; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFieldUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Field>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Field) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Field)));
        }

        /// <summary>
        /// editEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="entity">entity</param>
        /// <returns>Entity</returns>
        public Entity EditEntityUsingPUT (string id, Entity entity)
        {
             ApiResponse<Entity> localVarResponse = EditEntityUsingPUTWithHttpInfo(id, entity);
             return localVarResponse.Data;
        }

        /// <summary>
        /// editEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="entity">entity</param>
        /// <returns>ApiResponse of Entity</returns>
        public ApiResponse< Entity > EditEntityUsingPUTWithHttpInfo (string id, Entity entity)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SchemacontrollerApi->EditEntityUsingPUT");
            // verify the required parameter 'entity' is set
            if (entity == null)
                throw new ApiException(400, "Missing required parameter 'entity' when calling SchemacontrollerApi->EditEntityUsingPUT");

            var localVarPath = "/schemas/_entitys/put/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (entity != null && entity.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(entity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = entity; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditEntityUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Entity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Entity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Entity)));
        }

        /// <summary>
        /// editEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="entity">entity</param>
        /// <returns>Task of Entity</returns>
        public async System.Threading.Tasks.Task<Entity> EditEntityUsingPUTAsync (string id, Entity entity)
        {
             ApiResponse<Entity> localVarResponse = await EditEntityUsingPUTAsyncWithHttpInfo(id, entity);
             return localVarResponse.Data;

        }

        /// <summary>
        /// editEntity 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="entity">entity</param>
        /// <returns>Task of ApiResponse (Entity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Entity>> EditEntityUsingPUTAsyncWithHttpInfo (string id, Entity entity)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SchemacontrollerApi->EditEntityUsingPUT");
            // verify the required parameter 'entity' is set
            if (entity == null)
                throw new ApiException(400, "Missing required parameter 'entity' when calling SchemacontrollerApi->EditEntityUsingPUT");

            var localVarPath = "/schemas/_entitys/put/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (entity != null && entity.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(entity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = entity; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditEntityUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Entity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Entity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Entity)));
        }

        /// <summary>
        /// editField 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="field">field</param>
        /// <returns>Field</returns>
        public Field EditFieldUsingPUT (string id, Field field)
        {
             ApiResponse<Field> localVarResponse = EditFieldUsingPUTWithHttpInfo(id, field);
             return localVarResponse.Data;
        }

        /// <summary>
        /// editField 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="field">field</param>
        /// <returns>ApiResponse of Field</returns>
        public ApiResponse< Field > EditFieldUsingPUTWithHttpInfo (string id, Field field)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SchemacontrollerApi->EditFieldUsingPUT");
            // verify the required parameter 'field' is set
            if (field == null)
                throw new ApiException(400, "Missing required parameter 'field' when calling SchemacontrollerApi->EditFieldUsingPUT");

            var localVarPath = "/schemas/_fields/put/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (field != null && field.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(field); // http body (model) parameter
            }
            else
            {
                localVarPostBody = field; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditFieldUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Field>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Field) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Field)));
        }

        /// <summary>
        /// editField 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="field">field</param>
        /// <returns>Task of Field</returns>
        public async System.Threading.Tasks.Task<Field> EditFieldUsingPUTAsync (string id, Field field)
        {
             ApiResponse<Field> localVarResponse = await EditFieldUsingPUTAsyncWithHttpInfo(id, field);
             return localVarResponse.Data;

        }

        /// <summary>
        /// editField 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="field">field</param>
        /// <returns>Task of ApiResponse (Field)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Field>> EditFieldUsingPUTAsyncWithHttpInfo (string id, Field field)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SchemacontrollerApi->EditFieldUsingPUT");
            // verify the required parameter 'field' is set
            if (field == null)
                throw new ApiException(400, "Missing required parameter 'field' when calling SchemacontrollerApi->EditFieldUsingPUT");

            var localVarPath = "/schemas/_fields/put/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (field != null && field.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(field); // http body (model) parameter
            }
            else
            {
                localVarPostBody = field; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditFieldUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Field>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Field) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Field)));
        }

        /// <summary>
        /// findAllFields 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eid">eid</param>
        /// <returns>List&lt;Field&gt;</returns>
        public List<Field> FindAllFieldsUsingGET (string eid)
        {
             ApiResponse<List<Field>> localVarResponse = FindAllFieldsUsingGETWithHttpInfo(eid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// findAllFields 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eid">eid</param>
        /// <returns>ApiResponse of List&lt;Field&gt;</returns>
        public ApiResponse< List<Field> > FindAllFieldsUsingGETWithHttpInfo (string eid)
        {
            // verify the required parameter 'eid' is set
            if (eid == null)
                throw new ApiException(400, "Missing required parameter 'eid' when calling SchemacontrollerApi->FindAllFieldsUsingGET");

            var localVarPath = "/schemas/_fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eid != null) localVarQueryParams.Add("eid", Configuration.ApiClient.ParameterToString(eid)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindAllFieldsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Field>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Field>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Field>)));
        }

        /// <summary>
        /// findAllFields 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eid">eid</param>
        /// <returns>Task of List&lt;Field&gt;</returns>
        public async System.Threading.Tasks.Task<List<Field>> FindAllFieldsUsingGETAsync (string eid)
        {
             ApiResponse<List<Field>> localVarResponse = await FindAllFieldsUsingGETAsyncWithHttpInfo(eid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// findAllFields 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eid">eid</param>
        /// <returns>Task of ApiResponse (List&lt;Field&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Field>>> FindAllFieldsUsingGETAsyncWithHttpInfo (string eid)
        {
            // verify the required parameter 'eid' is set
            if (eid == null)
                throw new ApiException(400, "Missing required parameter 'eid' when calling SchemacontrollerApi->FindAllFieldsUsingGET");

            var localVarPath = "/schemas/_fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eid != null) localVarQueryParams.Add("eid", Configuration.ApiClient.ParameterToString(eid)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindAllFieldsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Field>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Field>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Field>)));
        }

        /// <summary>
        /// findEntityFields 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName">entityName</param>
        /// <returns>List&lt;Field&gt;</returns>
        public List<Field> FindEntityFieldsUsingGET (string entityName)
        {
             ApiResponse<List<Field>> localVarResponse = FindEntityFieldsUsingGETWithHttpInfo(entityName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// findEntityFields 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName">entityName</param>
        /// <returns>ApiResponse of List&lt;Field&gt;</returns>
        public ApiResponse< List<Field> > FindEntityFieldsUsingGETWithHttpInfo (string entityName)
        {
            // verify the required parameter 'entityName' is set
            if (entityName == null)
                throw new ApiException(400, "Missing required parameter 'entityName' when calling SchemacontrollerApi->FindEntityFieldsUsingGET");

            var localVarPath = "/schemas/fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entityName != null) localVarQueryParams.Add("entityName", Configuration.ApiClient.ParameterToString(entityName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindEntityFieldsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Field>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Field>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Field>)));
        }

        /// <summary>
        /// findEntityFields 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName">entityName</param>
        /// <returns>Task of List&lt;Field&gt;</returns>
        public async System.Threading.Tasks.Task<List<Field>> FindEntityFieldsUsingGETAsync (string entityName)
        {
             ApiResponse<List<Field>> localVarResponse = await FindEntityFieldsUsingGETAsyncWithHttpInfo(entityName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// findEntityFields 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityName">entityName</param>
        /// <returns>Task of ApiResponse (List&lt;Field&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Field>>> FindEntityFieldsUsingGETAsyncWithHttpInfo (string entityName)
        {
            // verify the required parameter 'entityName' is set
            if (entityName == null)
                throw new ApiException(400, "Missing required parameter 'entityName' when calling SchemacontrollerApi->FindEntityFieldsUsingGET");

            var localVarPath = "/schemas/fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entityName != null) localVarQueryParams.Add("entityName", Configuration.ApiClient.ParameterToString(entityName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindEntityFieldsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Field>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Field>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Field>)));
        }

        /// <summary>
        /// findOneField 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fid">fid</param>
        /// <returns>Field</returns>
        public Field FindOneFieldUsingGET (string fid)
        {
             ApiResponse<Field> localVarResponse = FindOneFieldUsingGETWithHttpInfo(fid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// findOneField 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fid">fid</param>
        /// <returns>ApiResponse of Field</returns>
        public ApiResponse< Field > FindOneFieldUsingGETWithHttpInfo (string fid)
        {
            // verify the required parameter 'fid' is set
            if (fid == null)
                throw new ApiException(400, "Missing required parameter 'fid' when calling SchemacontrollerApi->FindOneFieldUsingGET");

            var localVarPath = "/schemas/_fields/{fid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fid != null) localVarPathParams.Add("fid", Configuration.ApiClient.ParameterToString(fid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindOneFieldUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Field>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Field) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Field)));
        }

        /// <summary>
        /// findOneField 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fid">fid</param>
        /// <returns>Task of Field</returns>
        public async System.Threading.Tasks.Task<Field> FindOneFieldUsingGETAsync (string fid)
        {
             ApiResponse<Field> localVarResponse = await FindOneFieldUsingGETAsyncWithHttpInfo(fid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// findOneField 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fid">fid</param>
        /// <returns>Task of ApiResponse (Field)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Field>> FindOneFieldUsingGETAsyncWithHttpInfo (string fid)
        {
            // verify the required parameter 'fid' is set
            if (fid == null)
                throw new ApiException(400, "Missing required parameter 'fid' when calling SchemacontrollerApi->FindOneFieldUsingGET");

            var localVarPath = "/schemas/_fields/{fid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fid != null) localVarPathParams.Add("fid", Configuration.ApiClient.ParameterToString(fid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindOneFieldUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Field>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Field) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Field)));
        }

        /// <summary>
        /// findOne 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eid">eid</param>
        /// <returns>Entity</returns>
        public Entity FindOneUsingGET1 (string eid)
        {
             ApiResponse<Entity> localVarResponse = FindOneUsingGET1WithHttpInfo(eid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// findOne 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eid">eid</param>
        /// <returns>ApiResponse of Entity</returns>
        public ApiResponse< Entity > FindOneUsingGET1WithHttpInfo (string eid)
        {
            // verify the required parameter 'eid' is set
            if (eid == null)
                throw new ApiException(400, "Missing required parameter 'eid' when calling SchemacontrollerApi->FindOneUsingGET1");

            var localVarPath = "/schemas/_entitys/{eid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eid != null) localVarPathParams.Add("eid", Configuration.ApiClient.ParameterToString(eid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindOneUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Entity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Entity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Entity)));
        }

        /// <summary>
        /// findOne 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eid">eid</param>
        /// <returns>Task of Entity</returns>
        public async System.Threading.Tasks.Task<Entity> FindOneUsingGET1Async (string eid)
        {
             ApiResponse<Entity> localVarResponse = await FindOneUsingGET1AsyncWithHttpInfo(eid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// findOne 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eid">eid</param>
        /// <returns>Task of ApiResponse (Entity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Entity>> FindOneUsingGET1AsyncWithHttpInfo (string eid)
        {
            // verify the required parameter 'eid' is set
            if (eid == null)
                throw new ApiException(400, "Missing required parameter 'eid' when calling SchemacontrollerApi->FindOneUsingGET1");

            var localVarPath = "/schemas/_entitys/{eid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eid != null) localVarPathParams.Add("eid", Configuration.ApiClient.ParameterToString(eid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindOneUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Entity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Entity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Entity)));
        }

        /// <summary>
        /// getSchemas 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Entity&gt;</returns>
        public List<Entity> GetSchemasUsingGET ()
        {
             ApiResponse<List<Entity>> localVarResponse = GetSchemasUsingGETWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// getSchemas 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Entity&gt;</returns>
        public ApiResponse< List<Entity> > GetSchemasUsingGETWithHttpInfo ()
        {

            var localVarPath = "/schemas/_entitys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchemasUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Entity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Entity>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Entity>)));
        }

        /// <summary>
        /// getSchemas 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Entity&gt;</returns>
        public async System.Threading.Tasks.Task<List<Entity>> GetSchemasUsingGETAsync ()
        {
             ApiResponse<List<Entity>> localVarResponse = await GetSchemasUsingGETAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// getSchemas 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Entity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Entity>>> GetSchemasUsingGETAsyncWithHttpInfo ()
        {

            var localVarPath = "/schemas/_entitys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchemasUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Entity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Entity>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Entity>)));
        }

        /// <summary>
        /// resetCurrentDs 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataSourceId">dataSourceId</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity ResetCurrentDsUsingPUT (string dataSourceId)
        {
             ApiResponse<ResponseEntity> localVarResponse = ResetCurrentDsUsingPUTWithHttpInfo(dataSourceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// resetCurrentDs 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataSourceId">dataSourceId</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > ResetCurrentDsUsingPUTWithHttpInfo (string dataSourceId)
        {
            // verify the required parameter 'dataSourceId' is set
            if (dataSourceId == null)
                throw new ApiException(400, "Missing required parameter 'dataSourceId' when calling SchemacontrollerApi->ResetCurrentDsUsingPUT");

            var localVarPath = "/schemas/resetCurrentDs/{dataSourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataSourceId != null) localVarPathParams.Add("dataSourceId", Configuration.ApiClient.ParameterToString(dataSourceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetCurrentDsUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// resetCurrentDs 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataSourceId">dataSourceId</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> ResetCurrentDsUsingPUTAsync (string dataSourceId)
        {
             ApiResponse<ResponseEntity> localVarResponse = await ResetCurrentDsUsingPUTAsyncWithHttpInfo(dataSourceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// resetCurrentDs 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataSourceId">dataSourceId</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ResetCurrentDsUsingPUTAsyncWithHttpInfo (string dataSourceId)
        {
            // verify the required parameter 'dataSourceId' is set
            if (dataSourceId == null)
                throw new ApiException(400, "Missing required parameter 'dataSourceId' when calling SchemacontrollerApi->ResetCurrentDsUsingPUT");

            var localVarPath = "/schemas/resetCurrentDs/{dataSourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataSourceId != null) localVarPathParams.Add("dataSourceId", Configuration.ApiClient.ParameterToString(dataSourceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetCurrentDsUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// syncSchemas 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataSourceId">dataSourceId</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity SyncSchemasUsingPUT (string dataSourceId)
        {
             ApiResponse<ResponseEntity> localVarResponse = SyncSchemasUsingPUTWithHttpInfo(dataSourceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// syncSchemas 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataSourceId">dataSourceId</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > SyncSchemasUsingPUTWithHttpInfo (string dataSourceId)
        {
            // verify the required parameter 'dataSourceId' is set
            if (dataSourceId == null)
                throw new ApiException(400, "Missing required parameter 'dataSourceId' when calling SchemacontrollerApi->SyncSchemasUsingPUT");

            var localVarPath = "/schemas/sync/{dataSourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataSourceId != null) localVarPathParams.Add("dataSourceId", Configuration.ApiClient.ParameterToString(dataSourceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SyncSchemasUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// syncSchemas 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataSourceId">dataSourceId</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> SyncSchemasUsingPUTAsync (string dataSourceId)
        {
             ApiResponse<ResponseEntity> localVarResponse = await SyncSchemasUsingPUTAsyncWithHttpInfo(dataSourceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// syncSchemas 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataSourceId">dataSourceId</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> SyncSchemasUsingPUTAsyncWithHttpInfo (string dataSourceId)
        {
            // verify the required parameter 'dataSourceId' is set
            if (dataSourceId == null)
                throw new ApiException(400, "Missing required parameter 'dataSourceId' when calling SchemacontrollerApi->SyncSchemasUsingPUT");

            var localVarPath = "/schemas/sync/{dataSourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataSourceId != null) localVarPathParams.Add("dataSourceId", Configuration.ApiClient.ParameterToString(dataSourceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SyncSchemasUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

    }
}
