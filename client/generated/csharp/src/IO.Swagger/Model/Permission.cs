/* 
 * DataHive RESTful APIs
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Permission
    /// </summary>
    [DataContract]
    public partial class Permission :  IEquatable<Permission>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Permission" /> class.
        /// </summary>
        /// <param name="C">C.</param>
        /// <param name="D">D.</param>
        /// <param name="Eid">Eid.</param>
        /// <param name="Id">Id.</param>
        /// <param name="R">R.</param>
        /// <param name="RoleId">RoleId.</param>
        /// <param name="U">U.</param>
        public Permission(bool? C = default(bool?), bool? D = default(bool?), string Eid = default(string), string Id = default(string), bool? R = default(bool?), string RoleId = default(string), bool? U = default(bool?))
        {
            this.C = C;
            this.D = D;
            this.Eid = Eid;
            this.Id = Id;
            this.R = R;
            this.RoleId = RoleId;
            this.U = U;
        }
        
        /// <summary>
        /// Gets or Sets C
        /// </summary>
        [DataMember(Name="c", EmitDefaultValue=false)]
        public bool? C { get; set; }

        /// <summary>
        /// Gets or Sets D
        /// </summary>
        [DataMember(Name="d", EmitDefaultValue=false)]
        public bool? D { get; set; }

        /// <summary>
        /// Gets or Sets Eid
        /// </summary>
        [DataMember(Name="eid", EmitDefaultValue=false)]
        public string Eid { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets R
        /// </summary>
        [DataMember(Name="r", EmitDefaultValue=false)]
        public bool? R { get; set; }

        /// <summary>
        /// Gets or Sets RoleId
        /// </summary>
        [DataMember(Name="roleId", EmitDefaultValue=false)]
        public string RoleId { get; set; }

        /// <summary>
        /// Gets or Sets U
        /// </summary>
        [DataMember(Name="u", EmitDefaultValue=false)]
        public bool? U { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Permission {\n");
            sb.Append("  C: ").Append(C).Append("\n");
            sb.Append("  D: ").Append(D).Append("\n");
            sb.Append("  Eid: ").Append(Eid).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  R: ").Append(R).Append("\n");
            sb.Append("  RoleId: ").Append(RoleId).Append("\n");
            sb.Append("  U: ").Append(U).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Permission);
        }

        /// <summary>
        /// Returns true if Permission instances are equal
        /// </summary>
        /// <param name="other">Instance of Permission to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Permission other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.C == other.C ||
                    this.C != null &&
                    this.C.Equals(other.C)
                ) && 
                (
                    this.D == other.D ||
                    this.D != null &&
                    this.D.Equals(other.D)
                ) && 
                (
                    this.Eid == other.Eid ||
                    this.Eid != null &&
                    this.Eid.Equals(other.Eid)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.R == other.R ||
                    this.R != null &&
                    this.R.Equals(other.R)
                ) && 
                (
                    this.RoleId == other.RoleId ||
                    this.RoleId != null &&
                    this.RoleId.Equals(other.RoleId)
                ) && 
                (
                    this.U == other.U ||
                    this.U != null &&
                    this.U.Equals(other.U)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.C != null)
                    hash = hash * 59 + this.C.GetHashCode();
                if (this.D != null)
                    hash = hash * 59 + this.D.GetHashCode();
                if (this.Eid != null)
                    hash = hash * 59 + this.Eid.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.R != null)
                    hash = hash * 59 + this.R.GetHashCode();
                if (this.RoleId != null)
                    hash = hash * 59 + this.RoleId.GetHashCode();
                if (this.U != null)
                    hash = hash * 59 + this.U.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
