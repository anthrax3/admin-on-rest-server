/* 
 * DataHive RESTful APIs
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// DataSource
    /// </summary>
    [DataContract]
    public partial class DataSource :  IEquatable<DataSource>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Mongo for "mongo"
            /// </summary>
            [EnumMember(Value = "mongo")]
            Mongo,
            
            /// <summary>
            /// Enum Mysql for "mysql"
            /// </summary>
            [EnumMember(Value = "mysql")]
            Mysql,
            
            /// <summary>
            /// Enum Cds for "cds"
            /// </summary>
            [EnumMember(Value = "cds")]
            Cds,
            
            /// <summary>
            /// Enum Es for "es"
            /// </summary>
            [EnumMember(Value = "es")]
            Es
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DataSource" /> class.
        /// </summary>
        /// <param name="ClusterName">ClusterName.</param>
        /// <param name="Current">Current.</param>
        /// <param name="DbName">DbName.</param>
        /// <param name="Id">Id.</param>
        /// <param name="IndexName">IndexName.</param>
        /// <param name="JdbcUrl">JdbcUrl.</param>
        /// <param name="MySqlDbName">MySqlDbName.</param>
        /// <param name="Password">Password.</param>
        /// <param name="Type">Type.</param>
        /// <param name="Username">Username.</param>
        public DataSource(string ClusterName = default(string), bool? Current = default(bool?), string DbName = default(string), string Id = default(string), string IndexName = default(string), string JdbcUrl = default(string), string MySqlDbName = default(string), string Password = default(string), TypeEnum? Type = default(TypeEnum?), string Username = default(string))
        {
            this.ClusterName = ClusterName;
            this.Current = Current;
            this.DbName = DbName;
            this.Id = Id;
            this.IndexName = IndexName;
            this.JdbcUrl = JdbcUrl;
            this.MySqlDbName = MySqlDbName;
            this.Password = Password;
            this.Type = Type;
            this.Username = Username;
        }
        
        /// <summary>
        /// Gets or Sets ClusterName
        /// </summary>
        [DataMember(Name="clusterName", EmitDefaultValue=false)]
        public string ClusterName { get; set; }

        /// <summary>
        /// Gets or Sets Current
        /// </summary>
        [DataMember(Name="current", EmitDefaultValue=false)]
        public bool? Current { get; set; }

        /// <summary>
        /// Gets or Sets DbName
        /// </summary>
        [DataMember(Name="dbName", EmitDefaultValue=false)]
        public string DbName { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets IndexName
        /// </summary>
        [DataMember(Name="indexName", EmitDefaultValue=false)]
        public string IndexName { get; set; }

        /// <summary>
        /// Gets or Sets JdbcUrl
        /// </summary>
        [DataMember(Name="jdbcUrl", EmitDefaultValue=false)]
        public string JdbcUrl { get; set; }

        /// <summary>
        /// Gets or Sets MySqlDbName
        /// </summary>
        [DataMember(Name="mySqlDbName", EmitDefaultValue=false)]
        public string MySqlDbName { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }


        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DataSource {\n");
            sb.Append("  ClusterName: ").Append(ClusterName).Append("\n");
            sb.Append("  Current: ").Append(Current).Append("\n");
            sb.Append("  DbName: ").Append(DbName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IndexName: ").Append(IndexName).Append("\n");
            sb.Append("  JdbcUrl: ").Append(JdbcUrl).Append("\n");
            sb.Append("  MySqlDbName: ").Append(MySqlDbName).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DataSource);
        }

        /// <summary>
        /// Returns true if DataSource instances are equal
        /// </summary>
        /// <param name="other">Instance of DataSource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataSource other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ClusterName == other.ClusterName ||
                    this.ClusterName != null &&
                    this.ClusterName.Equals(other.ClusterName)
                ) && 
                (
                    this.Current == other.Current ||
                    this.Current != null &&
                    this.Current.Equals(other.Current)
                ) && 
                (
                    this.DbName == other.DbName ||
                    this.DbName != null &&
                    this.DbName.Equals(other.DbName)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.IndexName == other.IndexName ||
                    this.IndexName != null &&
                    this.IndexName.Equals(other.IndexName)
                ) && 
                (
                    this.JdbcUrl == other.JdbcUrl ||
                    this.JdbcUrl != null &&
                    this.JdbcUrl.Equals(other.JdbcUrl)
                ) && 
                (
                    this.MySqlDbName == other.MySqlDbName ||
                    this.MySqlDbName != null &&
                    this.MySqlDbName.Equals(other.MySqlDbName)
                ) && 
                (
                    this.Password == other.Password ||
                    this.Password != null &&
                    this.Password.Equals(other.Password)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Username == other.Username ||
                    this.Username != null &&
                    this.Username.Equals(other.Username)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ClusterName != null)
                    hash = hash * 59 + this.ClusterName.GetHashCode();
                if (this.Current != null)
                    hash = hash * 59 + this.Current.GetHashCode();
                if (this.DbName != null)
                    hash = hash * 59 + this.DbName.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.IndexName != null)
                    hash = hash * 59 + this.IndexName.GetHashCode();
                if (this.JdbcUrl != null)
                    hash = hash * 59 + this.JdbcUrl.GetHashCode();
                if (this.MySqlDbName != null)
                    hash = hash * 59 + this.MySqlDbName.GetHashCode();
                if (this.Password != null)
                    hash = hash * 59 + this.Password.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Username != null)
                    hash = hash * 59 + this.Username.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
