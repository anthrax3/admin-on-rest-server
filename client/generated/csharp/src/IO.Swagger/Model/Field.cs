/* 
 * DataHive RESTful APIs
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Field
    /// </summary>
    [DataContract]
    public partial class Field :  IEquatable<Field>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Component
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ComponentEnum
        {
            
            /// <summary>
            /// Enum Autocomplete for "Autocomplete"
            /// </summary>
            [EnumMember(Value = "Autocomplete")]
            Autocomplete,
            
            /// <summary>
            /// Enum Boolean for "Boolean"
            /// </summary>
            [EnumMember(Value = "Boolean")]
            Boolean,
            
            /// <summary>
            /// Enum NullableBoolean for "NullableBoolean"
            /// </summary>
            [EnumMember(Value = "NullableBoolean")]
            NullableBoolean,
            
            /// <summary>
            /// Enum CheckboxGroup for "CheckboxGroup"
            /// </summary>
            [EnumMember(Value = "CheckboxGroup")]
            CheckboxGroup,
            
            /// <summary>
            /// Enum Date for "Date"
            /// </summary>
            [EnumMember(Value = "Date")]
            Date,
            
            /// <summary>
            /// Enum Disabled for "Disabled"
            /// </summary>
            [EnumMember(Value = "Disabled")]
            Disabled,
            
            /// <summary>
            /// Enum File for "File"
            /// </summary>
            [EnumMember(Value = "File")]
            File,
            
            /// <summary>
            /// Enum Image for "Image"
            /// </summary>
            [EnumMember(Value = "Image")]
            Image,
            
            /// <summary>
            /// Enum LongText for "LongText"
            /// </summary>
            [EnumMember(Value = "LongText")]
            LongText,
            
            /// <summary>
            /// Enum Number for "Number"
            /// </summary>
            [EnumMember(Value = "Number")]
            Number,
            
            /// <summary>
            /// Enum RadioButtonGroup for "RadioButtonGroup"
            /// </summary>
            [EnumMember(Value = "RadioButtonGroup")]
            RadioButtonGroup,
            
            /// <summary>
            /// Enum ReferenceArray for "ReferenceArray"
            /// </summary>
            [EnumMember(Value = "ReferenceArray")]
            ReferenceArray,
            
            /// <summary>
            /// Enum Reference for "Reference"
            /// </summary>
            [EnumMember(Value = "Reference")]
            Reference,
            
            /// <summary>
            /// Enum RichText for "RichText"
            /// </summary>
            [EnumMember(Value = "RichText")]
            RichText,
            
            /// <summary>
            /// Enum SelectArray for "SelectArray"
            /// </summary>
            [EnumMember(Value = "SelectArray")]
            SelectArray,
            
            /// <summary>
            /// Enum Select for "Select"
            /// </summary>
            [EnumMember(Value = "Select")]
            Select,
            
            /// <summary>
            /// Enum Text for "Text"
            /// </summary>
            [EnumMember(Value = "Text")]
            Text
        }

        /// <summary>
        /// Gets or Sets InputType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InputTypeEnum
        {
            
            /// <summary>
            /// Enum Text for "text"
            /// </summary>
            [EnumMember(Value = "text")]
            Text,
            
            /// <summary>
            /// Enum Email for "email"
            /// </summary>
            [EnumMember(Value = "email")]
            Email,
            
            /// <summary>
            /// Enum Password for "password"
            /// </summary>
            [EnumMember(Value = "password")]
            Password,
            
            /// <summary>
            /// Enum Url for "url"
            /// </summary>
            [EnumMember(Value = "url")]
            Url
        }

        /// <summary>
        /// Gets or Sets Component
        /// </summary>
        [DataMember(Name="component", EmitDefaultValue=false)]
        public ComponentEnum? Component { get; set; }
        /// <summary>
        /// Gets or Sets InputType
        /// </summary>
        [DataMember(Name="inputType", EmitDefaultValue=false)]
        public InputTypeEnum? InputType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Field" /> class.
        /// </summary>
        /// <param name="Choices">Choices.</param>
        /// <param name="Component">Component.</param>
        /// <param name="DataSourceId">DataSourceId.</param>
        /// <param name="DefaultValue">DefaultValue.</param>
        /// <param name="Eid">Eid.</param>
        /// <param name="Id">Id.</param>
        /// <param name="InputType">InputType.</param>
        /// <param name="IsAutoIncremented">IsAutoIncremented.</param>
        /// <param name="IsPartOfPrimaryKey">IsPartOfPrimaryKey.</param>
        /// <param name="Label">Label.</param>
        /// <param name="MaxLength">MaxLength.</param>
        /// <param name="MaxValue">MaxValue.</param>
        /// <param name="MinValue">MinValue.</param>
        /// <param name="Name">Name.</param>
        /// <param name="Reference">Reference.</param>
        /// <param name="ReferenceOptionText">ReferenceOptionText.</param>
        /// <param name="Required">Required.</param>
        /// <param name="ShowInCreate">ShowInCreate.</param>
        /// <param name="ShowInEdit">ShowInEdit.</param>
        /// <param name="ShowInFilter">ShowInFilter.</param>
        /// <param name="ShowInList">ShowInList.</param>
        /// <param name="ShowInShow">ShowInShow.</param>
        public Field(List<IChoiceItem> Choices = default(List<IChoiceItem>), ComponentEnum? Component = default(ComponentEnum?), string DataSourceId = default(string), string DefaultValue = default(string), string Eid = default(string), string Id = default(string), InputTypeEnum? InputType = default(InputTypeEnum?), bool? IsAutoIncremented = default(bool?), bool? IsPartOfPrimaryKey = default(bool?), string Label = default(string), int? MaxLength = default(int?), string MaxValue = default(string), string MinValue = default(string), string Name = default(string), string Reference = default(string), string ReferenceOptionText = default(string), bool? Required = default(bool?), bool? ShowInCreate = default(bool?), bool? ShowInEdit = default(bool?), bool? ShowInFilter = default(bool?), bool? ShowInList = default(bool?), bool? ShowInShow = default(bool?))
        {
            this.Choices = Choices;
            this.Component = Component;
            this.DataSourceId = DataSourceId;
            this.DefaultValue = DefaultValue;
            this.Eid = Eid;
            this.Id = Id;
            this.InputType = InputType;
            this.IsAutoIncremented = IsAutoIncremented;
            this.IsPartOfPrimaryKey = IsPartOfPrimaryKey;
            this.Label = Label;
            this.MaxLength = MaxLength;
            this.MaxValue = MaxValue;
            this.MinValue = MinValue;
            this.Name = Name;
            this.Reference = Reference;
            this.ReferenceOptionText = ReferenceOptionText;
            this.Required = Required;
            this.ShowInCreate = ShowInCreate;
            this.ShowInEdit = ShowInEdit;
            this.ShowInFilter = ShowInFilter;
            this.ShowInList = ShowInList;
            this.ShowInShow = ShowInShow;
        }
        
        /// <summary>
        /// Gets or Sets Choices
        /// </summary>
        [DataMember(Name="choices", EmitDefaultValue=false)]
        public List<IChoiceItem> Choices { get; set; }


        /// <summary>
        /// Gets or Sets DataSourceId
        /// </summary>
        [DataMember(Name="dataSourceId", EmitDefaultValue=false)]
        public string DataSourceId { get; set; }

        /// <summary>
        /// Gets or Sets DefaultValue
        /// </summary>
        [DataMember(Name="defaultValue", EmitDefaultValue=false)]
        public string DefaultValue { get; set; }

        /// <summary>
        /// Gets or Sets Eid
        /// </summary>
        [DataMember(Name="eid", EmitDefaultValue=false)]
        public string Eid { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }


        /// <summary>
        /// Gets or Sets IsAutoIncremented
        /// </summary>
        [DataMember(Name="isAutoIncremented", EmitDefaultValue=false)]
        public bool? IsAutoIncremented { get; set; }

        /// <summary>
        /// Gets or Sets IsPartOfPrimaryKey
        /// </summary>
        [DataMember(Name="isPartOfPrimaryKey", EmitDefaultValue=false)]
        public bool? IsPartOfPrimaryKey { get; set; }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// Gets or Sets MaxLength
        /// </summary>
        [DataMember(Name="maxLength", EmitDefaultValue=false)]
        public int? MaxLength { get; set; }

        /// <summary>
        /// Gets or Sets MaxValue
        /// </summary>
        [DataMember(Name="maxValue", EmitDefaultValue=false)]
        public string MaxValue { get; set; }

        /// <summary>
        /// Gets or Sets MinValue
        /// </summary>
        [DataMember(Name="minValue", EmitDefaultValue=false)]
        public string MinValue { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [DataMember(Name="reference", EmitDefaultValue=false)]
        public string Reference { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceOptionText
        /// </summary>
        [DataMember(Name="referenceOptionText", EmitDefaultValue=false)]
        public string ReferenceOptionText { get; set; }

        /// <summary>
        /// Gets or Sets Required
        /// </summary>
        [DataMember(Name="required", EmitDefaultValue=false)]
        public bool? Required { get; set; }

        /// <summary>
        /// Gets or Sets ShowInCreate
        /// </summary>
        [DataMember(Name="showInCreate", EmitDefaultValue=false)]
        public bool? ShowInCreate { get; set; }

        /// <summary>
        /// Gets or Sets ShowInEdit
        /// </summary>
        [DataMember(Name="showInEdit", EmitDefaultValue=false)]
        public bool? ShowInEdit { get; set; }

        /// <summary>
        /// Gets or Sets ShowInFilter
        /// </summary>
        [DataMember(Name="showInFilter", EmitDefaultValue=false)]
        public bool? ShowInFilter { get; set; }

        /// <summary>
        /// Gets or Sets ShowInList
        /// </summary>
        [DataMember(Name="showInList", EmitDefaultValue=false)]
        public bool? ShowInList { get; set; }

        /// <summary>
        /// Gets or Sets ShowInShow
        /// </summary>
        [DataMember(Name="showInShow", EmitDefaultValue=false)]
        public bool? ShowInShow { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Field {\n");
            sb.Append("  Choices: ").Append(Choices).Append("\n");
            sb.Append("  Component: ").Append(Component).Append("\n");
            sb.Append("  DataSourceId: ").Append(DataSourceId).Append("\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("  Eid: ").Append(Eid).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InputType: ").Append(InputType).Append("\n");
            sb.Append("  IsAutoIncremented: ").Append(IsAutoIncremented).Append("\n");
            sb.Append("  IsPartOfPrimaryKey: ").Append(IsPartOfPrimaryKey).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  MaxLength: ").Append(MaxLength).Append("\n");
            sb.Append("  MaxValue: ").Append(MaxValue).Append("\n");
            sb.Append("  MinValue: ").Append(MinValue).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  ReferenceOptionText: ").Append(ReferenceOptionText).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  ShowInCreate: ").Append(ShowInCreate).Append("\n");
            sb.Append("  ShowInEdit: ").Append(ShowInEdit).Append("\n");
            sb.Append("  ShowInFilter: ").Append(ShowInFilter).Append("\n");
            sb.Append("  ShowInList: ").Append(ShowInList).Append("\n");
            sb.Append("  ShowInShow: ").Append(ShowInShow).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Field);
        }

        /// <summary>
        /// Returns true if Field instances are equal
        /// </summary>
        /// <param name="other">Instance of Field to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Field other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Choices == other.Choices ||
                    this.Choices != null &&
                    this.Choices.SequenceEqual(other.Choices)
                ) && 
                (
                    this.Component == other.Component ||
                    this.Component != null &&
                    this.Component.Equals(other.Component)
                ) && 
                (
                    this.DataSourceId == other.DataSourceId ||
                    this.DataSourceId != null &&
                    this.DataSourceId.Equals(other.DataSourceId)
                ) && 
                (
                    this.DefaultValue == other.DefaultValue ||
                    this.DefaultValue != null &&
                    this.DefaultValue.Equals(other.DefaultValue)
                ) && 
                (
                    this.Eid == other.Eid ||
                    this.Eid != null &&
                    this.Eid.Equals(other.Eid)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.InputType == other.InputType ||
                    this.InputType != null &&
                    this.InputType.Equals(other.InputType)
                ) && 
                (
                    this.IsAutoIncremented == other.IsAutoIncremented ||
                    this.IsAutoIncremented != null &&
                    this.IsAutoIncremented.Equals(other.IsAutoIncremented)
                ) && 
                (
                    this.IsPartOfPrimaryKey == other.IsPartOfPrimaryKey ||
                    this.IsPartOfPrimaryKey != null &&
                    this.IsPartOfPrimaryKey.Equals(other.IsPartOfPrimaryKey)
                ) && 
                (
                    this.Label == other.Label ||
                    this.Label != null &&
                    this.Label.Equals(other.Label)
                ) && 
                (
                    this.MaxLength == other.MaxLength ||
                    this.MaxLength != null &&
                    this.MaxLength.Equals(other.MaxLength)
                ) && 
                (
                    this.MaxValue == other.MaxValue ||
                    this.MaxValue != null &&
                    this.MaxValue.Equals(other.MaxValue)
                ) && 
                (
                    this.MinValue == other.MinValue ||
                    this.MinValue != null &&
                    this.MinValue.Equals(other.MinValue)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Reference == other.Reference ||
                    this.Reference != null &&
                    this.Reference.Equals(other.Reference)
                ) && 
                (
                    this.ReferenceOptionText == other.ReferenceOptionText ||
                    this.ReferenceOptionText != null &&
                    this.ReferenceOptionText.Equals(other.ReferenceOptionText)
                ) && 
                (
                    this.Required == other.Required ||
                    this.Required != null &&
                    this.Required.Equals(other.Required)
                ) && 
                (
                    this.ShowInCreate == other.ShowInCreate ||
                    this.ShowInCreate != null &&
                    this.ShowInCreate.Equals(other.ShowInCreate)
                ) && 
                (
                    this.ShowInEdit == other.ShowInEdit ||
                    this.ShowInEdit != null &&
                    this.ShowInEdit.Equals(other.ShowInEdit)
                ) && 
                (
                    this.ShowInFilter == other.ShowInFilter ||
                    this.ShowInFilter != null &&
                    this.ShowInFilter.Equals(other.ShowInFilter)
                ) && 
                (
                    this.ShowInList == other.ShowInList ||
                    this.ShowInList != null &&
                    this.ShowInList.Equals(other.ShowInList)
                ) && 
                (
                    this.ShowInShow == other.ShowInShow ||
                    this.ShowInShow != null &&
                    this.ShowInShow.Equals(other.ShowInShow)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Choices != null)
                    hash = hash * 59 + this.Choices.GetHashCode();
                if (this.Component != null)
                    hash = hash * 59 + this.Component.GetHashCode();
                if (this.DataSourceId != null)
                    hash = hash * 59 + this.DataSourceId.GetHashCode();
                if (this.DefaultValue != null)
                    hash = hash * 59 + this.DefaultValue.GetHashCode();
                if (this.Eid != null)
                    hash = hash * 59 + this.Eid.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.InputType != null)
                    hash = hash * 59 + this.InputType.GetHashCode();
                if (this.IsAutoIncremented != null)
                    hash = hash * 59 + this.IsAutoIncremented.GetHashCode();
                if (this.IsPartOfPrimaryKey != null)
                    hash = hash * 59 + this.IsPartOfPrimaryKey.GetHashCode();
                if (this.Label != null)
                    hash = hash * 59 + this.Label.GetHashCode();
                if (this.MaxLength != null)
                    hash = hash * 59 + this.MaxLength.GetHashCode();
                if (this.MaxValue != null)
                    hash = hash * 59 + this.MaxValue.GetHashCode();
                if (this.MinValue != null)
                    hash = hash * 59 + this.MinValue.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Reference != null)
                    hash = hash * 59 + this.Reference.GetHashCode();
                if (this.ReferenceOptionText != null)
                    hash = hash * 59 + this.ReferenceOptionText.GetHashCode();
                if (this.Required != null)
                    hash = hash * 59 + this.Required.GetHashCode();
                if (this.ShowInCreate != null)
                    hash = hash * 59 + this.ShowInCreate.GetHashCode();
                if (this.ShowInEdit != null)
                    hash = hash * 59 + this.ShowInEdit.GetHashCode();
                if (this.ShowInFilter != null)
                    hash = hash * 59 + this.ShowInFilter.GetHashCode();
                if (this.ShowInList != null)
                    hash = hash * 59 + this.ShowInList.GetHashCode();
                if (this.ShowInShow != null)
                    hash = hash * 59 + this.ShowInShow.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
