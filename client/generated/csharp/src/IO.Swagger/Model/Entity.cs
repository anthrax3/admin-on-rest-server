/* 
 * DataHive RESTful APIs
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Entity
    /// </summary>
    [DataContract]
    public partial class Entity :  IEquatable<Entity>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Crud
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CrudEnum
        {
            
            /// <summary>
            /// Enum C for "c"
            /// </summary>
            [EnumMember(Value = "c")]
            C,
            
            /// <summary>
            /// Enum R for "r"
            /// </summary>
            [EnumMember(Value = "r")]
            R,
            
            /// <summary>
            /// Enum U for "u"
            /// </summary>
            [EnumMember(Value = "u")]
            U,
            
            /// <summary>
            /// Enum D for "d"
            /// </summary>
            [EnumMember(Value = "d")]
            D
        }

        /// <summary>
        /// Gets or Sets Redirect
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RedirectEnum
        {
            
            /// <summary>
            /// Enum Edit for "edit"
            /// </summary>
            [EnumMember(Value = "edit")]
            Edit,
            
            /// <summary>
            /// Enum Show for "show"
            /// </summary>
            [EnumMember(Value = "show")]
            Show,
            
            /// <summary>
            /// Enum List for "list"
            /// </summary>
            [EnumMember(Value = "list")]
            List
        }

        /// <summary>
        /// Gets or Sets Crud
        /// </summary>
        [DataMember(Name="crud", EmitDefaultValue=false)]
        public List<CrudEnum> Crud { get; set; }
        /// <summary>
        /// Gets or Sets Redirect
        /// </summary>
        [DataMember(Name="redirect", EmitDefaultValue=false)]
        public RedirectEnum? Redirect { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Entity" /> class.
        /// </summary>
        /// <param name="Crud">Crud.</param>
        /// <param name="Fields">Fields.</param>
        /// <param name="Id">Id.</param>
        /// <param name="Label">Label.</param>
        /// <param name="Name">Name.</param>
        /// <param name="Redirect">Redirect.</param>
        /// <param name="ShowInMenu">ShowInMenu.</param>
        public Entity(List<CrudEnum> Crud = default(List<CrudEnum>), List<Field> Fields = default(List<Field>), string Id = default(string), string Label = default(string), string Name = default(string), RedirectEnum? Redirect = default(RedirectEnum?), bool? ShowInMenu = default(bool?))
        {
            this.Crud = Crud;
            this.Fields = Fields;
            this.Id = Id;
            this.Label = Label;
            this.Name = Name;
            this.Redirect = Redirect;
            this.ShowInMenu = ShowInMenu;
        }
        

        /// <summary>
        /// Gets or Sets Fields
        /// </summary>
        [DataMember(Name="fields", EmitDefaultValue=false)]
        public List<Field> Fields { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }


        /// <summary>
        /// Gets or Sets ShowInMenu
        /// </summary>
        [DataMember(Name="showInMenu", EmitDefaultValue=false)]
        public bool? ShowInMenu { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Entity {\n");
            sb.Append("  Crud: ").Append(Crud).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Redirect: ").Append(Redirect).Append("\n");
            sb.Append("  ShowInMenu: ").Append(ShowInMenu).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Entity);
        }

        /// <summary>
        /// Returns true if Entity instances are equal
        /// </summary>
        /// <param name="other">Instance of Entity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Entity other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Crud == other.Crud ||
                    this.Crud != null &&
                    this.Crud.SequenceEqual(other.Crud)
                ) && 
                (
                    this.Fields == other.Fields ||
                    this.Fields != null &&
                    this.Fields.SequenceEqual(other.Fields)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Label == other.Label ||
                    this.Label != null &&
                    this.Label.Equals(other.Label)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Redirect == other.Redirect ||
                    this.Redirect != null &&
                    this.Redirect.Equals(other.Redirect)
                ) && 
                (
                    this.ShowInMenu == other.ShowInMenu ||
                    this.ShowInMenu != null &&
                    this.ShowInMenu.Equals(other.ShowInMenu)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Crud != null)
                    hash = hash * 59 + this.Crud.GetHashCode();
                if (this.Fields != null)
                    hash = hash * 59 + this.Fields.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Label != null)
                    hash = hash * 59 + this.Label.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Redirect != null)
                    hash = hash * 59 + this.Redirect.GetHashCode();
                if (this.ShowInMenu != null)
                    hash = hash * 59 + this.ShowInMenu.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
